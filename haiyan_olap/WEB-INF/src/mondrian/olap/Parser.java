//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Tue Mar 25 17:23:02 CST 2008
//----------------------------------------------------

package mondrian.olap;

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;

import java_cup.runtime.Symbol;
import mondrian.mdx.UnresolvedFunCall;
import mondrian.resource.MondrianResource;

/**
 * CUP v0.10k generated parser.
 * 
 * @version Tue Mar 25 17:23:02 CST 2008
 */
public class Parser extends java_cup.runtime.lr_parser {

	/** Default constructor. */
	public Parser() {
		super();
	}

	/** Constructor which sets the default scanner. */
	public Parser(java_cup.runtime.Scanner s) {
		super(s);
	}

	/** Production table. */
	protected static final short _production_table[][] = unpackFromStrings(new String[] { "\000\174\000\002\002\004\000\002\036\003\000\002\040"
			+ "\003\000\002\037\003\000\002\037\003\000\002\035\003"
			+ "\000\002\035\003\000\002\034\003\000\002\034\003\000"
			+ "\002\025\003\000\002\025\005\000\002\026\003\000\002"
			+ "\017\003\000\002\017\005\000\002\017\005\000\002\016"
			+ "\003\000\002\016\005\000\002\015\003\000\002\015\004"
			+ "\000\002\014\003\000\002\014\005\000\002\014\005\000"
			+ "\002\014\005\000\002\014\005\000\002\014\005\000\002"
			+ "\014\006\000\002\014\005\000\002\014\006\000\002\013"
			+ "\003\000\002\013\005\000\002\013\005\000\002\013\005"
			+ "\000\002\012\003\000\002\012\005\000\002\012\005\000"
			+ "\002\010\003\000\002\010\004\000\002\010\004\000\002"
			+ "\021\003\000\002\021\003\000\002\021\003\000\002\021"
			+ "\005\000\002\021\005\000\002\021\005\000\002\021\010"
			+ "\000\002\021\006\000\002\021\010\000\002\021\005\000"
			+ "\002\021\005\000\002\021\003\000\002\021\003\000\002"
			+ "\004\007\000\002\020\002\000\002\020\003\000\002\070"
			+ "\002\000\002\070\004\000\002\072\006\000\002\005\002"
			+ "\000\002\005\004\000\002\033\003\000\002\033\003\000"
			+ "\002\033\003\000\002\033\003\000\002\033\003\000\002"
			+ "\033\003\000\002\006\005\000\002\006\003\000\002\007"
			+ "\003\000\002\007\002\000\002\063\002\000\002\063\003"
			+ "\000\002\062\003\000\002\062\005\000\002\024\003\000"
			+ "\002\024\004\000\002\023\011\000\002\071\002\000\002"
			+ "\071\004\000\002\054\002\000\002\054\003\000\002\053"
			+ "\003\000\002\053\005\000\002\022\002\000\002\022\004"
			+ "\000\002\056\002\000\002\056\003\000\002\064\003\000"
			+ "\002\064\004\000\002\043\003\000\002\043\003\000\002"
			+ "\041\007\000\002\041\007\000\002\057\002\000\002\057"
			+ "\004\000\002\065\003\000\002\065\005\000\002\030\003"
			+ "\000\002\044\005\000\002\042\006\000\002\042\006\000"
			+ "\002\031\003\000\002\003\007\000\002\003\007\000\002"
			+ "\052\002\000\002\052\004\000\002\061\002\000\002\061"
			+ "\003\000\002\032\003\000\002\073\003\000\002\073\006"
			+ "\000\002\060\005\000\002\047\002\000\002\047\003\000"
			+ "\002\066\003\000\002\066\005\000\002\050\003\000\002"
			+ "\027\003\000\002\011\003\000\002\055\005\000\002\045"
			+ "\002\000\002\045\003\000\002\067\003\000\002\067\005"
			+ "\000\002\046\003" });

	/** Access to production table. */
	public short[][] production_table() {
		return _production_table;
	}

	/** Parse-action table. */
	protected static final short[][] _action_table = unpackFromStrings(new String[] { "\000\300\000\010\031\uffb5\037\004\040\007\001\002\000"
			+ "\006\022\254\032\253\001\002\000\004\002\uffb8\001\002"
			+ "\000\004\002\247\001\002\000\036\007\047\010\031\012"
			+ "\037\024\025\025\052\030\032\051\026\053\027\055\046"
			+ "\057\022\063\035\064\030\065\043\067\033\001\002\000"
			+ "\004\031\011\001\002\000\042\007\uff9a\010\uff9a\012\uff9a"
			+ "\016\uffb3\023\015\024\uff9a\025\uff9a\030\uff9a\051\uff9a\053"
			+ "\uff9a\055\uff9a\057\uff9a\063\uff9a\064\uff9a\065\uff9a\067\uff9a"
			+ "\001\002\000\004\016\224\001\002\000\036\007\047\010"
			+ "\031\012\037\024\025\025\052\030\032\051\026\053\027"
			+ "\055\046\057\022\063\035\064\030\065\043\067\033\001"
			+ "\002\000\006\016\uffb1\043\020\001\002\000\004\014\017"
			+ "\001\002\000\004\016\uffb2\001\002\000\036\007\uff99\010"
			+ "\uff99\012\uff99\024\uff99\025\uff99\030\uff99\051\uff99\053\uff99"
			+ "\055\uff99\057\uff99\063\uff99\064\uff99\065\uff99\067\uff99\001"
			+ "\002\000\040\007\uff9a\010\uff9a\012\uff9a\023\015\024\uff9a"
			+ "\025\uff9a\030\uff9a\051\uff9a\053\uff9a\055\uff9a\057\uff9a\063"
			+ "\uff9a\064\uff9a\065\uff9a\067\uff9a\001\002\000\004\016\uffb0"
			+ "\001\002\000\030\007\047\010\031\012\037\025\052\030"
			+ "\032\051\026\053\027\063\035\064\030\065\043\067\033"
			+ "\001\002\000\114\002\uffd9\004\uffd9\005\uffd9\011\uffd9\012"
			+ "\uffd9\013\uffd9\015\uffd9\017\uffd9\020\uffd9\021\uffd9\022\uffd9"
			+ "\024\uffd9\026\uffd9\027\uffd9\030\uffd9\031\uffd9\032\uffd9\033"
			+ "\uffd9\034\uffd9\036\uffd9\041\uffd9\042\uffd9\043\uffd9\044\uffd9"
			+ "\045\uffd9\046\uffd9\047\uffd9\050\uffd9\052\uffd9\053\220\054"
			+ "\uffd9\055\uffd9\056\uffd9\057\uffd9\060\uffd9\061\uffd9\062\uffd9"
			+ "\001\002\000\112\002\uffcf\004\uffcf\005\uffcf\011\uffcf\012"
			+ "\uffcf\013\uffcf\015\uffcf\017\uffcf\020\uffcf\021\uffcf\022\uffcf"
			+ "\024\uffcf\026\uffcf\027\uffcf\030\uffcf\031\uffcf\032\uffcf\033"
			+ "\uffcf\034\uffcf\036\uffcf\041\uffcf\042\uffcf\043\uffcf\044\uffcf"
			+ "\045\uffcf\046\uffcf\047\uffcf\050\uffcf\052\uffcf\054\uffcf\055"
			+ "\uffcf\056\uffcf\057\uffcf\060\uffcf\061\uffcf\062\uffcf\001\002"
			+ "\000\036\007\047\010\031\012\037\024\025\025\052\030"
			+ "\032\051\026\053\027\055\046\057\022\063\035\064\030"
			+ "\065\043\067\033\001\002\000\042\007\047\010\031\012"
			+ "\037\024\025\025\052\030\032\043\uffbd\051\026\053\027"
			+ "\055\046\057\022\060\uffbc\063\035\064\030\065\043\067"
			+ "\033\001\002\000\040\007\047\010\031\012\037\024\025"
			+ "\025\052\030\032\043\uffbd\051\026\053\027\055\046\057"
			+ "\022\063\035\064\030\065\043\067\033\001\002\000\120"
			+ "\002\ufffe\004\ufffe\005\ufffe\011\ufffe\012\ufffe\013\ufffe\015"
			+ "\ufffe\016\ufffe\017\ufffe\020\ufffe\021\ufffe\022\ufffe\024\ufffe"
			+ "\026\ufffe\027\ufffe\030\ufffe\031\ufffe\032\ufffe\033\ufffe\034"
			+ "\ufffe\035\ufffe\036\ufffe\041\ufffe\042\ufffe\043\ufffe\044\ufffe"
			+ "\045\ufffe\046\ufffe\047\ufffe\050\ufffe\052\ufffe\053\ufffe\054"
			+ "\ufffe\055\ufffe\056\ufffe\057\ufffe\060\ufffe\061\ufffe\062\ufffe"
			+ "\001\002\000\004\053\206\001\002\000\120\002\ufff9\004"
			+ "\ufff9\005\ufff9\011\ufff9\012\ufff9\013\ufff9\015\ufff9\016\ufff9"
			+ "\017\ufff9\020\ufff9\021\ufff9\022\ufff9\024\ufff9\026\ufff9\027"
			+ "\ufff9\030\ufff9\031\ufff9\032\ufff9\033\ufff9\034\ufff9\035\ufff9"
			+ "\036\ufff9\041\ufff9\042\ufff9\043\ufff9\044\ufff9\045\ufff9\046"
			+ "\ufff9\047\ufff9\050\ufff9\052\ufff9\053\ufff9\054\ufff9\055\ufff9"
			+ "\056\ufff9\057\ufff9\060\ufff9\061\ufff9\062\ufff9\001\002\000"
			+ "\112\002\uffdb\004\uffdb\005\uffdb\011\uffdb\012\uffdb\013\uffdb"
			+ "\015\uffdb\017\uffdb\020\uffdb\021\uffdb\022\uffdb\024\uffdb\026"
			+ "\uffdb\027\uffdb\030\uffdb\031\uffdb\032\uffdb\033\uffdb\034\uffdb"
			+ "\036\uffdb\041\uffdb\042\uffdb\043\uffdb\044\uffdb\045\uffdb\046"
			+ "\uffdb\047\uffdb\050\uffdb\052\uffdb\054\uffdb\055\uffdb\056\uffdb"
			+ "\057\uffdb\060\uffdb\061\uffdb\062\uffdb\001\002\000\012\012"
			+ "\161\026\uff98\030\uff92\042\073\001\002\000\112\002\uffda"
			+ "\004\uffda\005\uffda\011\uffda\012\uffda\013\uffda\015\uffda\017"
			+ "\uffda\020\uffda\021\uffda\022\uffda\024\uffda\026\uffda\027\uffda"
			+ "\030\uffda\031\uffda\032\uffda\033\uffda\034\uffda\036\uffda\041"
			+ "\uffda\042\uffda\043\uffda\044\uffda\045\uffda\046\uffda\047\uffda"
			+ "\050\uffda\052\uffda\054\uffda\055\uffda\056\uffda\057\uffda\060"
			+ "\uffda\061\uffda\062\uffda\001\002\000\040\002\uffbf\005\uffbf"
			+ "\011\uffbf\012\uffbf\022\uffbf\026\uffbf\027\076\030\uffbf\031"
			+ "\uffbf\032\uffbf\036\075\042\uffbf\043\uffbf\060\uffbf\061\uffbf"
			+ "\001\002\000\120\002\ufffa\004\ufffa\005\ufffa\011\ufffa\012"
			+ "\ufffa\013\ufffa\015\ufffa\016\ufffa\017\ufffa\020\ufffa\021\ufffa"
			+ "\022\ufffa\024\ufffa\026\ufffa\027\ufffa\030\ufffa\031\ufffa\032"
			+ "\ufffa\033\ufffa\034\ufffa\035\ufffa\036\ufffa\041\ufffa\042\ufffa"
			+ "\043\ufffa\044\ufffa\045\ufffa\046\ufffa\047\ufffa\050\ufffa\052"
			+ "\ufffa\053\ufffa\054\ufffa\055\ufffa\056\ufffa\057\ufffa\060\ufffa"
			+ "\061\ufffa\062\ufffa\001\002\000\110\002\uffe1\004\uffe1\005"
			+ "\uffe1\011\uffe1\012\uffe1\013\uffe1\015\uffe1\017\uffe1\020\uffe1"
			+ "\021\uffe1\022\uffe1\024\uffe1\026\uffe1\027\uffe1\030\uffe1\031"
			+ "\uffe1\032\uffe1\033\uffe1\034\uffe1\036\uffe1\041\uffe1\042\uffe1"
			+ "\043\uffe1\044\uffe1\046\uffe1\047\uffe1\050\uffe1\052\uffe1\054"
			+ "\uffe1\055\uffe1\056\uffe1\057\uffe1\060\uffe1\061\uffe1\062\uffe1"
			+ "\001\002\000\110\002\uffe5\004\uffe5\005\uffe5\011\uffe5\012"
			+ "\uffe5\013\uffe5\015\uffe5\017\uffe5\020\uffe5\021\uffe5\022\uffe5"
			+ "\024\uffe5\026\uffe5\027\uffe5\030\uffe5\031\uffe5\032\uffe5\033"
			+ "\uffe5\034\uffe5\036\uffe5\041\110\042\uffe5\043\uffe5\044\uffe5"
			+ "\046\uffe5\047\uffe5\050\uffe5\052\uffe5\054\uffe5\055\uffe5\056"
			+ "\uffe5\057\uffe5\060\uffe5\061\uffe5\062\111\001\002\000\052"
			+ "\002\ufff5\004\100\005\ufff5\011\ufff5\012\ufff5\013\ufff5\015"
			+ "\ufff5\022\ufff5\026\ufff5\027\ufff5\030\ufff5\031\ufff5\032\ufff5"
			+ "\033\ufff5\034\ufff5\036\ufff5\042\ufff5\043\ufff5\060\ufff5\061"
			+ "\ufff5\001\002\000\120\002\000\004\000\005\000\011\000"
			+ "\012\000\013\000\015\000\016\000\017\000\020\000\021"
			+ "\000\022\000\024\000\026\000\027\000\030\000\031\000"
			+ "\032\000\033\000\034\000\035\000\036\000\041\000\042"
			+ "\000\043\000\044\000\045\000\046\000\047\000\050\000"
			+ "\052\000\053\000\054\000\055\000\056\000\057\000\060"
			+ "\000\061\000\062\000\001\002\000\052\002\ufff2\004\ufff2"
			+ "\005\ufff2\011\ufff2\012\ufff2\013\ufff2\015\ufff2\022\ufff2\026"
			+ "\ufff2\027\ufff2\030\ufff2\031\ufff2\032\ufff2\033\ufff2\034\ufff2"
			+ "\036\ufff2\042\ufff2\043\ufff2\060\ufff2\061\ufff2\001\002\000"
			+ "\076\002\ufff0\004\ufff0\005\ufff0\011\ufff0\012\ufff0\013\ufff0"
			+ "\015\ufff0\017\133\020\145\021\143\022\ufff0\024\141\026"
			+ "\ufff0\027\ufff0\030\ufff0\031\ufff0\032\ufff0\033\ufff0\034\ufff0"
			+ "\036\ufff0\042\ufff0\043\ufff0\046\136\047\135\050\140\052"
			+ "\137\054\144\056\142\060\ufff0\061\ufff0\001\002\000\030"
			+ "\007\047\010\031\012\037\025\052\030\032\051\026\053"
			+ "\027\063\035\064\030\065\043\067\033\001\002\000\044"
			+ "\007\047\010\031\012\037\013\uffcd\015\uffcd\024\025\025"
			+ "\052\030\032\034\uffcd\051\026\053\027\055\046\057\022"
			+ "\063\035\064\030\065\043\067\033\001\002\000\104\002"
			+ "\uffee\004\uffee\005\uffee\011\uffee\012\uffee\013\uffee\015\uffee"
			+ "\017\uffee\020\uffee\021\uffee\022\uffee\024\uffee\026\uffee\027"
			+ "\uffee\030\uffee\031\uffee\032\uffee\033\uffee\034\uffee\036\uffee"
			+ "\042\uffee\043\uffee\044\105\046\uffee\047\uffee\050\uffee\052"
			+ "\uffee\054\uffee\055\106\056\uffee\057\104\060\uffee\061\uffee"
			+ "\001\002\000\112\002\uffde\004\uffde\005\uffde\011\uffde\012"
			+ "\uffde\013\uffde\015\uffde\017\uffde\020\uffde\021\uffde\022\uffde"
			+ "\024\uffde\026\uffde\027\uffde\030\uffde\031\uffde\032\uffde\033"
			+ "\uffde\034\uffde\036\uffde\041\uffde\042\uffde\043\uffde\044\uffde"
			+ "\045\056\046\uffde\047\uffde\050\uffde\052\uffde\054\uffde\055"
			+ "\uffde\056\uffde\057\uffde\060\uffde\061\uffde\062\uffde\001\002"
			+ "\000\112\002\uffd0\004\uffd0\005\uffd0\011\uffd0\012\uffd0\013"
			+ "\uffd0\015\uffd0\017\uffd0\020\uffd0\021\uffd0\022\uffd0\024\uffd0"
			+ "\026\uffd0\027\uffd0\030\uffd0\031\uffd0\032\uffd0\033\uffd0\034"
			+ "\uffd0\036\uffd0\041\uffd0\042\uffd0\043\uffd0\044\uffd0\045\uffd0"
			+ "\046\uffd0\047\uffd0\050\uffd0\052\uffd0\054\uffd0\055\uffd0\056"
			+ "\uffd0\057\uffd0\060\uffd0\061\uffd0\062\uffd0\001\002\000\120"
			+ "\002\ufffd\004\ufffd\005\ufffd\011\ufffd\012\ufffd\013\ufffd\015"
			+ "\ufffd\016\ufffd\017\ufffd\020\ufffd\021\ufffd\022\ufffd\024\ufffd"
			+ "\026\ufffd\027\ufffd\030\ufffd\031\ufffd\032\ufffd\033\ufffd\034"
			+ "\ufffd\035\ufffd\036\ufffd\041\ufffd\042\ufffd\043\ufffd\044\ufffd"
			+ "\045\ufffd\046\ufffd\047\ufffd\050\ufffd\052\ufffd\053\ufffd\054"
			+ "\ufffd\055\ufffd\056\ufffd\057\ufffd\060\ufffd\061\ufffd\062\ufffd"
			+ "\001\002\000\120\002\ufffc\004\ufffc\005\ufffc\011\ufffc\012"
			+ "\ufffc\013\ufffc\015\ufffc\016\ufffc\017\ufffc\020\ufffc\021\ufffc"
			+ "\022\ufffc\024\ufffc\026\ufffc\027\ufffc\030\ufffc\031\ufffc\032"
			+ "\ufffc\033\ufffc\034\ufffc\035\ufffc\036\ufffc\041\ufffc\042\ufffc"
			+ "\043\ufffc\044\ufffc\045\ufffc\046\ufffc\047\ufffc\050\ufffc\052"
			+ "\ufffc\053\ufffc\054\ufffc\055\ufffc\056\ufffc\057\ufffc\060\ufffc"
			+ "\061\ufffc\062\ufffc\001\002\000\120\002\ufffb\004\ufffb\005"
			+ "\ufffb\011\ufffb\012\ufffb\013\ufffb\015\ufffb\016\ufffb\017\ufffb"
			+ "\020\ufffb\021\ufffb\022\ufffb\024\ufffb\026\ufffb\027\ufffb\030"
			+ "\ufffb\031\ufffb\032\ufffb\033\ufffb\034\ufffb\035\ufffb\036\ufffb"
			+ "\041\ufffb\042\ufffb\043\ufffb\044\ufffb\045\ufffb\046\ufffb\047"
			+ "\ufffb\050\ufffb\052\ufffb\053\ufffb\054\ufffb\055\ufffb\056\ufffb"
			+ "\057\ufffb\060\ufffb\061\ufffb\062\ufffb\001\002\000\014\012"
			+ "\037\030\032\064\030\065\043\066\063\001\002\000\112"
			+ "\002\uffd6\004\uffd6\005\uffd6\011\uffd6\012\uffd6\013\uffd6\015"
			+ "\uffd6\017\uffd6\020\uffd6\021\uffd6\022\uffd6\024\uffd6\026\uffd6"
			+ "\027\uffd6\030\uffd6\031\uffd6\032\uffd6\033\uffd6\034\uffd6\036"
			+ "\uffd6\041\uffd6\042\uffd6\043\uffd6\044\uffd6\045\uffd6\046\uffd6"
			+ "\047\uffd6\050\uffd6\052\uffd6\054\uffd6\055\uffd6\056\uffd6\057"
			+ "\uffd6\060\uffd6\061\uffd6\062\uffd6\001\002\000\004\053\064"
			+ "\001\002\000\114\002\uffd8\004\uffd8\005\uffd8\011\uffd8\012"
			+ "\uffd8\013\uffd8\015\uffd8\017\uffd8\020\uffd8\021\uffd8\022\uffd8"
			+ "\024\uffd8\026\uffd8\027\uffd8\030\uffd8\031\uffd8\032\uffd8\033"
			+ "\uffd8\034\uffd8\036\uffd8\041\uffd8\042\uffd8\043\uffd8\044\uffd8"
			+ "\045\uffd8\046\uffd8\047\uffd8\050\uffd8\052\uffd8\053\ufffc\054"
			+ "\uffd8\055\uffd8\056\uffd8\057\uffd8\060\uffd8\061\uffd8\062\uffd8"
			+ "\001\002\000\114\002\uffd7\004\uffd7\005\uffd7\011\uffd7\012"
			+ "\uffd7\013\uffd7\015\uffd7\017\uffd7\020\uffd7\021\uffd7\022\uffd7"
			+ "\024\uffd7\026\uffd7\027\uffd7\030\uffd7\031\uffd7\032\uffd7\033"
			+ "\uffd7\034\uffd7\036\uffd7\041\uffd7\042\uffd7\043\uffd7\044\uffd7"
			+ "\045\uffd7\046\uffd7\047\uffd7\050\uffd7\052\uffd7\053\ufffb\054"
			+ "\uffd7\055\uffd7\056\uffd7\057\uffd7\060\uffd7\061\uffd7\062\uffd7"
			+ "\001\002\000\112\002\uffff\004\uffff\005\uffff\011\uffff\012"
			+ "\uffff\013\uffff\015\uffff\017\uffff\020\uffff\021\uffff\022\uffff"
			+ "\024\uffff\026\uffff\027\uffff\030\uffff\031\uffff\032\uffff\033"
			+ "\uffff\034\uffff\036\uffff\041\uffff\042\uffff\043\uffff\044\uffff"
			+ "\045\uffff\046\uffff\047\uffff\050\uffff\052\uffff\054\uffff\055"
			+ "\uffff\056\uffff\057\uffff\060\uffff\061\uffff\062\uffff\001\002"
			+ "\000\042\007\047\010\031\012\037\024\025\025\052\030"
			+ "\032\043\uffbd\051\026\053\027\055\046\057\022\061\uffbc"
			+ "\063\035\064\030\065\043\067\033\001\002\000\004\061"
			+ "\103\001\002\000\006\060\uffbb\061\uffbb\001\002\000\012"
			+ "\042\073\043\uffbe\060\uffba\061\uffba\001\002\000\004\043"
			+ "\071\001\002\000\040\007\047\010\031\012\037\024\025"
			+ "\025\052\030\032\043\uffbd\051\026\053\027\055\046\057"
			+ "\022\063\035\064\030\065\043\067\033\001\002\000\006"
			+ "\060\uffb9\061\uffb9\001\002\000\036\007\047\010\031\012"
			+ "\037\024\025\025\052\030\032\051\026\053\027\055\046"
			+ "\057\022\063\035\064\030\065\043\067\033\001\002\000"
			+ "\040\002\uffc0\005\uffc0\011\uffc0\012\uffc0\022\uffc0\026\uffc0"
			+ "\027\076\030\uffc0\031\uffc0\032\uffc0\036\075\042\uffc0\043"
			+ "\uffc0\060\uffc0\061\uffc0\001\002\000\036\007\047\010\031"
			+ "\012\037\024\025\025\052\030\032\051\026\053\027\055"
			+ "\046\057\022\063\035\064\030\065\043\067\033\001\002"
			+ "\000\036\007\047\010\031\012\037\024\025\025\052\030"
			+ "\032\051\026\053\027\055\046\057\022\063\035\064\030"
			+ "\065\043\067\033\001\002\000\052\002\ufff4\004\100\005"
			+ "\ufff4\011\ufff4\012\ufff4\013\ufff4\015\ufff4\022\ufff4\026\ufff4"
			+ "\027\ufff4\030\ufff4\031\ufff4\032\ufff4\033\ufff4\034\ufff4\036"
			+ "\ufff4\042\ufff4\043\ufff4\060\ufff4\061\ufff4\001\002\000\036"
			+ "\007\047\010\031\012\037\024\025\025\052\030\032\051"
			+ "\026\053\027\055\046\057\022\063\035\064\030\065\043"
			+ "\067\033\001\002\000\052\002\ufff1\004\ufff1\005\ufff1\011"
			+ "\ufff1\012\ufff1\013\ufff1\015\ufff1\022\ufff1\026\ufff1\027\ufff1"
			+ "\030\ufff1\031\ufff1\032\ufff1\033\ufff1\034\ufff1\036\ufff1\042"
			+ "\ufff1\043\ufff1\060\ufff1\061\ufff1\001\002\000\052\002\ufff3"
			+ "\004\100\005\ufff3\011\ufff3\012\ufff3\013\ufff3\015\ufff3\022"
			+ "\ufff3\026\ufff3\027\ufff3\030\ufff3\031\ufff3\032\ufff3\033\ufff3"
			+ "\034\ufff3\036\ufff3\042\ufff3\043\ufff3\060\ufff3\061\ufff3\001"
			+ "\002\000\112\002\uffd5\004\uffd5\005\uffd5\011\uffd5\012\uffd5"
			+ "\013\uffd5\015\uffd5\017\uffd5\020\uffd5\021\uffd5\022\uffd5\024"
			+ "\uffd5\026\uffd5\027\uffd5\030\uffd5\031\uffd5\032\uffd5\033\uffd5"
			+ "\034\uffd5\036\uffd5\041\uffd5\042\uffd5\043\uffd5\044\uffd5\045"
			+ "\uffd5\046\uffd5\047\uffd5\050\uffd5\052\uffd5\054\uffd5\055\uffd5"
			+ "\056\uffd5\057\uffd5\060\uffd5\061\uffd5\062\uffd5\001\002\000"
			+ "\034\007\047\010\031\012\037\025\052\030\032\051\026"
			+ "\053\027\055\046\057\022\063\035\064\030\065\043\067"
			+ "\033\001\002\000\034\007\047\010\031\012\037\025\052"
			+ "\030\032\051\026\053\027\055\046\057\022\063\035\064"
			+ "\030\065\043\067\033\001\002\000\034\007\047\010\031"
			+ "\012\037\025\052\030\032\051\026\053\027\055\046\057"
			+ "\022\063\035\064\030\065\043\067\033\001\002\000\110"
			+ "\002\uffe3\004\uffe3\005\uffe3\011\uffe3\012\uffe3\013\uffe3\015"
			+ "\uffe3\017\uffe3\020\uffe3\021\uffe3\022\uffe3\024\uffe3\026\uffe3"
			+ "\027\uffe3\030\uffe3\031\uffe3\032\uffe3\033\uffe3\034\uffe3\036"
			+ "\uffe3\041\110\042\uffe3\043\uffe3\044\uffe3\046\uffe3\047\uffe3"
			+ "\050\uffe3\052\uffe3\054\uffe3\055\uffe3\056\uffe3\057\uffe3\060"
			+ "\uffe3\061\uffe3\062\111\001\002\000\034\007\047\010\031"
			+ "\012\037\025\052\030\032\051\026\053\027\055\046\057"
			+ "\022\063\035\064\030\065\043\067\033\001\002\000\034"
			+ "\007\047\010\031\012\037\025\052\030\032\051\026\053"
			+ "\027\055\046\057\022\063\035\064\030\065\043\067\033"
			+ "\001\002\000\110\002\uffdf\004\uffdf\005\uffdf\011\uffdf\012"
			+ "\uffdf\013\uffdf\015\uffdf\017\uffdf\020\uffdf\021\uffdf\022\uffdf"
			+ "\024\uffdf\026\uffdf\027\uffdf\030\uffdf\031\uffdf\032\uffdf\033"
			+ "\uffdf\034\uffdf\036\uffdf\041\uffdf\042\uffdf\043\uffdf\044\uffdf"
			+ "\046\uffdf\047\uffdf\050\uffdf\052\uffdf\054\uffdf\055\uffdf\056"
			+ "\uffdf\057\uffdf\060\uffdf\061\uffdf\062\uffdf\001\002\000\110"
			+ "\002\uffe0\004\uffe0\005\uffe0\011\uffe0\012\uffe0\013\uffe0\015"
			+ "\uffe0\017\uffe0\020\uffe0\021\uffe0\022\uffe0\024\uffe0\026\uffe0"
			+ "\027\uffe0\030\uffe0\031\uffe0\032\uffe0\033\uffe0\034\uffe0\036"
			+ "\uffe0\041\uffe0\042\uffe0\043\uffe0\044\uffe0\046\uffe0\047\uffe0"
			+ "\050\uffe0\052\uffe0\054\uffe0\055\uffe0\056\uffe0\057\uffe0\060"
			+ "\uffe0\061\uffe0\062\uffe0\001\002\000\110\002\uffe2\004\uffe2"
			+ "\005\uffe2\011\uffe2\012\uffe2\013\uffe2\015\uffe2\017\uffe2\020"
			+ "\uffe2\021\uffe2\022\uffe2\024\uffe2\026\uffe2\027\uffe2\030\uffe2"
			+ "\031\uffe2\032\uffe2\033\uffe2\034\uffe2\036\uffe2\041\110\042"
			+ "\uffe2\043\uffe2\044\uffe2\046\uffe2\047\uffe2\050\uffe2\052\uffe2"
			+ "\054\uffe2\055\uffe2\056\uffe2\057\uffe2\060\uffe2\061\uffe2\062"
			+ "\111\001\002\000\110\002\uffe4\004\uffe4\005\uffe4\011\uffe4"
			+ "\012\uffe4\013\uffe4\015\uffe4\017\uffe4\020\uffe4\021\uffe4\022"
			+ "\uffe4\024\uffe4\026\uffe4\027\uffe4\030\uffe4\031\uffe4\032\uffe4"
			+ "\033\uffe4\034\uffe4\036\uffe4\041\110\042\uffe4\043\uffe4\044"
			+ "\uffe4\046\uffe4\047\uffe4\050\uffe4\052\uffe4\054\uffe4\055\uffe4"
			+ "\056\uffe4\057\uffe4\060\uffe4\061\uffe4\062\111\001\002\000"
			+ "\014\013\uffcc\015\uffcc\027\076\034\uffcc\036\075\001\002"
			+ "\000\010\013\uffcb\015\uffcb\034\uffcb\001\002\000\010\013"
			+ "\122\015\uffc8\034\123\001\002\000\004\015\131\001\002"
			+ "\000\036\007\047\010\031\012\037\024\025\025\052\030"
			+ "\032\051\026\053\027\055\046\057\022\063\035\064\030"
			+ "\065\043\067\033\001\002\000\036\007\047\010\031\012"
			+ "\037\024\025\025\052\030\032\051\026\053\027\055\046"
			+ "\057\022\063\035\064\030\065\043\067\033\001\002\000"
			+ "\010\013\uffca\015\uffca\034\uffca\001\002\000\010\027\076"
			+ "\033\126\036\075\001\002\000\036\007\047\010\031\012"
			+ "\037\024\025\025\052\030\032\051\026\053\027\055\046"
			+ "\057\022\063\035\064\030\065\043\067\033\001\002\000"
			+ "\014\013\uffc9\015\uffc9\027\076\034\uffc9\036\075\001\002"
			+ "\000\010\015\uffc7\027\076\036\075\001\002\000\112\002"
			+ "\uffce\004\uffce\005\uffce\011\uffce\012\uffce\013\uffce\015\uffce"
			+ "\017\uffce\020\uffce\021\uffce\022\uffce\024\uffce\026\uffce\027"
			+ "\uffce\030\uffce\031\uffce\032\uffce\033\uffce\034\uffce\036\uffce"
			+ "\041\uffce\042\uffce\043\uffce\044\uffce\045\uffce\046\uffce\047"
			+ "\uffce\050\uffce\052\uffce\054\uffce\055\uffce\056\uffce\057\uffce"
			+ "\060\uffce\061\uffce\062\uffce\001\002\000\112\002\uffdc\004"
			+ "\uffdc\005\uffdc\011\uffdc\012\uffdc\013\uffdc\015\uffdc\017\uffdc"
			+ "\020\uffdc\021\uffdc\022\uffdc\024\uffdc\026\uffdc\027\uffdc\030"
			+ "\uffdc\031\uffdc\032\uffdc\033\uffdc\034\uffdc\036\uffdc\041\uffdc"
			+ "\042\uffdc\043\uffdc\044\uffdc\045\056\046\uffdc\047\uffdc\050"
			+ "\uffdc\052\uffdc\054\uffdc\055\uffdc\056\uffdc\057\uffdc\060\uffdc"
			+ "\061\uffdc\062\uffdc\001\002\000\034\007\047\010\031\012"
			+ "\037\025\052\030\032\051\026\053\027\055\046\057\022"
			+ "\063\035\064\030\065\043\067\033\001\002\000\034\007"
			+ "\047\010\031\012\037\025\052\030\032\051\026\053\027"
			+ "\055\046\057\022\063\035\064\030\065\043\067\033\001"
			+ "\002\000\034\007\uffc1\010\uffc1\012\uffc1\025\uffc1\030\uffc1"
			+ "\051\uffc1\053\uffc1\055\uffc1\057\uffc1\063\uffc1\064\uffc1\065"
			+ "\uffc1\067\uffc1\001\002\000\034\007\uffc6\010\uffc6\012\uffc6"
			+ "\025\uffc6\030\uffc6\051\uffc6\053\uffc6\055\uffc6\057\uffc6\063"
			+ "\uffc6\064\uffc6\065\uffc6\067\uffc6\001\002\000\034\007\uffc2"
			+ "\010\uffc2\012\uffc2\025\uffc2\030\uffc2\051\uffc2\053\uffc2\055"
			+ "\uffc2\057\uffc2\063\uffc2\064\uffc2\065\uffc2\067\uffc2\001\002"
			+ "\000\034\007\uffc3\010\uffc3\012\uffc3\025\uffc3\030\uffc3\051"
			+ "\uffc3\053\uffc3\055\uffc3\057\uffc3\063\uffc3\064\uffc3\065\uffc3"
			+ "\067\uffc3\001\002\000\006\017\152\021\153\001\002\000"
			+ "\034\007\uffc5\010\uffc5\012\uffc5\025\uffc5\030\uffc5\051\uffc5"
			+ "\053\uffc5\055\uffc5\057\uffc5\063\uffc5\064\uffc5\065\uffc5\067"
			+ "\uffc5\001\002\000\034\007\047\010\031\012\037\025\052"
			+ "\030\032\051\026\053\027\055\046\057\022\063\035\064"
			+ "\030\065\043\067\033\001\002\000\034\007\uffc4\010\uffc4"
			+ "\012\uffc4\025\uffc4\030\uffc4\051\uffc4\053\uffc4\055\uffc4\057"
			+ "\uffc4\063\uffc4\064\uffc4\065\uffc4\067\uffc4\001\002\000\036"
			+ "\007\047\010\031\012\037\014\150\025\147\030\032\051"
			+ "\026\053\027\055\046\057\022\063\035\064\030\065\043"
			+ "\067\033\001\002\000\104\002\uffeb\004\uffeb\005\uffeb\011"
			+ "\uffeb\012\uffeb\013\uffeb\015\uffeb\017\uffeb\020\uffeb\021\uffeb"
			+ "\022\uffeb\024\uffeb\026\uffeb\027\uffeb\030\uffeb\031\uffeb\032"
			+ "\uffeb\033\uffeb\034\uffeb\036\uffeb\042\uffeb\043\uffeb\044\105"
			+ "\046\uffeb\047\uffeb\050\uffeb\052\uffeb\054\uffeb\055\106\056"
			+ "\uffeb\057\104\060\uffeb\061\uffeb\001\002\000\112\002\uffec"
			+ "\004\uffec\005\uffec\011\uffec\012\uffec\013\uffec\015\uffec\017"
			+ "\uffec\020\uffec\021\uffec\022\uffec\024\uffec\026\uffec\027\uffec"
			+ "\030\uffec\031\uffec\032\uffec\033\uffec\034\uffec\036\uffec\041"
			+ "\uffd0\042\uffec\043\uffec\044\uffd0\045\uffd0\046\uffec\047\uffec"
			+ "\050\uffec\052\uffec\054\uffec\055\uffd0\056\uffec\057\uffd0\060"
			+ "\uffec\061\uffec\062\uffd0\001\002\000\076\002\uffea\004\uffea"
			+ "\005\uffea\011\uffea\012\uffea\013\uffea\015\uffea\017\uffea\020"
			+ "\uffea\021\uffea\022\uffea\024\uffea\026\uffea\027\uffea\030\uffea"
			+ "\031\uffea\032\uffea\033\uffea\034\uffea\036\uffea\042\uffea\043"
			+ "\uffea\046\uffea\047\uffea\050\uffea\052\uffea\054\uffea\056\uffea"
			+ "\060\uffea\061\uffea\001\002\000\104\002\uffe9\004\uffe9\005"
			+ "\uffe9\011\uffe9\012\uffe9\013\uffe9\015\uffe9\017\uffe9\020\uffe9"
			+ "\021\uffe9\022\uffe9\024\uffe9\026\uffe9\027\uffe9\030\uffe9\031"
			+ "\uffe9\032\uffe9\033\uffe9\034\uffe9\036\uffe9\042\uffe9\043\uffe9"
			+ "\044\105\046\uffe9\047\uffe9\050\uffe9\052\uffe9\054\uffe9\055"
			+ "\106\056\uffe9\057\104\060\uffe9\061\uffe9\001\002\000\034"
			+ "\007\047\010\031\012\037\025\052\030\032\051\026\053"
			+ "\027\055\046\057\022\063\035\064\030\065\043\067\033"
			+ "\001\002\000\034\007\047\010\031\012\037\025\052\030"
			+ "\032\051\026\053\027\055\046\057\022\063\035\064\030"
			+ "\065\043\067\033\001\002\000\104\002\uffe8\004\uffe8\005"
			+ "\uffe8\011\uffe8\012\uffe8\013\uffe8\015\uffe8\017\uffe8\020\uffe8"
			+ "\021\uffe8\022\uffe8\024\uffe8\026\uffe8\027\uffe8\030\uffe8\031"
			+ "\uffe8\032\uffe8\033\uffe8\034\uffe8\036\uffe8\042\uffe8\043\uffe8"
			+ "\044\105\046\uffe8\047\uffe8\050\uffe8\052\uffe8\054\uffe8\055"
			+ "\106\056\uffe8\057\104\060\uffe8\061\uffe8\001\002\000\104"
			+ "\002\uffe6\004\uffe6\005\uffe6\011\uffe6\012\uffe6\013\uffe6\015"
			+ "\uffe6\017\uffe6\020\uffe6\021\uffe6\022\uffe6\024\uffe6\026\uffe6"
			+ "\027\uffe6\030\uffe6\031\uffe6\032\uffe6\033\uffe6\034\uffe6\036"
			+ "\uffe6\042\uffe6\043\uffe6\044\105\046\uffe6\047\uffe6\050\uffe6"
			+ "\052\uffe6\054\uffe6\055\106\056\uffe6\057\104\060\uffe6\061"
			+ "\uffe6\001\002\000\104\002\uffed\004\uffed\005\uffed\011\uffed"
			+ "\012\uffed\013\uffed\015\uffed\017\uffed\020\uffed\021\uffed\022"
			+ "\uffed\024\uffed\026\uffed\027\uffed\030\uffed\031\uffed\032\uffed"
			+ "\033\uffed\034\uffed\036\uffed\042\uffed\043\uffed\044\105\046"
			+ "\uffed\047\uffed\050\uffed\052\uffed\054\uffed\055\106\056\uffed"
			+ "\057\104\060\uffed\061\uffed\001\002\000\104\002\uffe7\004"
			+ "\uffe7\005\uffe7\011\uffe7\012\uffe7\013\uffe7\015\uffe7\017\uffe7"
			+ "\020\uffe7\021\uffe7\022\uffe7\024\uffe7\026\uffe7\027\uffe7\030"
			+ "\uffe7\031\uffe7\032\uffe7\033\uffe7\034\uffe7\036\uffe7\042\uffe7"
			+ "\043\uffe7\044\105\046\uffe7\047\uffe7\050\uffe7\052\uffe7\054"
			+ "\uffe7\055\106\056\uffe7\057\104\060\uffe7\061\uffe7\001\002"
			+ "\000\004\026\uff97\001\002\000\004\030\uff91\001\002\000"
			+ "\004\026\175\001\002\000\004\030\164\001\002\000\012"
			+ "\012\037\030\032\064\030\065\043\001\002\000\004\026"
			+ "\uff93\001\002\000\022\002\ufff8\005\ufff8\011\ufff8\026\ufff8"
			+ "\030\ufff8\035\ufff8\043\ufff8\045\ufff8\001\002\000\006\026"
			+ "\uff90\043\173\001\002\000\010\026\uff8e\043\uff8e\045\171"
			+ "\001\002\000\012\012\037\030\032\064\030\065\043\001"
			+ "\002\000\022\002\ufff7\005\ufff7\011\ufff7\026\ufff7\030\ufff7"
			+ "\035\ufff7\043\ufff7\045\ufff7\001\002\000\012\012\037\030"
			+ "\032\064\030\065\043\001\002\000\004\026\uff8f\001\002"
			+ "\000\016\006\176\012\037\030\032\063\177\064\030\065"
			+ "\043\001\002\000\004\053\203\001\002\000\006\016\uff95"
			+ "\043\uff95\001\002\000\006\016\uff9c\043\uff9c\001\002\000"
			+ "\006\016\uff9b\043\uff9b\001\002\000\006\016\uff96\043\uff96"
			+ "\001\002\000\004\063\204\001\002\000\004\061\205\001"
			+ "\002\000\006\016\uff94\043\uff94\001\002\000\036\007\047"
			+ "\010\031\012\037\024\025\025\052\030\032\051\026\053"
			+ "\027\055\046\057\022\063\035\064\030\065\043\067\033"
			+ "\001\002\000\006\005\210\042\073\001\002\000\012\012"
			+ "\037\030\032\064\030\065\043\001\002\000\004\061\212"
			+ "\001\002\000\112\002\uffd3\004\uffd3\005\uffd3\011\uffd3\012"
			+ "\uffd3\013\uffd3\015\uffd3\017\uffd3\020\uffd3\021\uffd3\022\uffd3"
			+ "\024\uffd3\026\uffd3\027\uffd3\030\uffd3\031\uffd3\032\uffd3\033"
			+ "\uffd3\034\uffd3\036\uffd3\041\uffd3\042\uffd3\043\uffd3\044\uffd3"
			+ "\045\uffd3\046\uffd3\047\uffd3\050\uffd3\052\uffd3\054\uffd3\055"
			+ "\uffd3\056\uffd3\057\uffd3\060\uffd3\061\uffd3\062\uffd3\001\002"
			+ "\000\004\061\214\001\002\000\112\002\uffd2\004\uffd2\005"
			+ "\uffd2\011\uffd2\012\uffd2\013\uffd2\015\uffd2\017\uffd2\020\uffd2"
			+ "\021\uffd2\022\uffd2\024\uffd2\026\uffd2\027\uffd2\030\uffd2\031"
			+ "\uffd2\032\uffd2\033\uffd2\034\uffd2\036\uffd2\041\uffd2\042\uffd2"
			+ "\043\uffd2\044\uffd2\045\uffd2\046\uffd2\047\uffd2\050\uffd2\052"
			+ "\uffd2\054\uffd2\055\uffd2\056\uffd2\057\uffd2\060\uffd2\061\uffd2"
			+ "\062\uffd2\001\002\000\004\060\216\001\002\000\112\002"
			+ "\uffd1\004\uffd1\005\uffd1\011\uffd1\012\uffd1\013\uffd1\015\uffd1"
			+ "\017\uffd1\020\uffd1\021\uffd1\022\uffd1\024\uffd1\026\uffd1\027"
			+ "\uffd1\030\uffd1\031\uffd1\032\uffd1\033\uffd1\034\uffd1\036\uffd1"
			+ "\041\uffd1\042\uffd1\043\uffd1\044\uffd1\045\uffd1\046\uffd1\047"
			+ "\uffd1\050\uffd1\052\uffd1\054\uffd1\055\uffd1\056\uffd1\057\uffd1"
			+ "\060\uffd1\061\uffd1\062\uffd1\001\002\000\052\002\uffef\004"
			+ "\uffef\005\uffef\011\uffef\012\uffef\013\uffef\015\uffef\022\uffef"
			+ "\026\uffef\027\uffef\030\uffef\031\uffef\032\uffef\033\uffef\034"
			+ "\uffef\036\uffef\042\uffef\043\uffef\060\uffef\061\uffef\001\002"
			+ "\000\042\007\047\010\031\012\037\024\025\025\052\030"
			+ "\032\043\uffbd\051\026\053\027\055\046\057\022\061\uffbc"
			+ "\063\035\064\030\065\043\067\033\001\002\000\004\061"
			+ "\222\001\002\000\112\002\uffd4\004\uffd4\005\uffd4\011\uffd4"
			+ "\012\uffd4\013\uffd4\015\uffd4\017\uffd4\020\uffd4\021\uffd4\022"
			+ "\uffd4\024\uffd4\026\uffd4\027\uffd4\030\uffd4\031\uffd4\032\uffd4"
			+ "\033\uffd4\034\uffd4\036\uffd4\041\uffd4\042\uffd4\043\uffd4\044"
			+ "\uffd4\045\uffd4\046\uffd4\047\uffd4\050\uffd4\052\uffd4\054\uffd4"
			+ "\055\uffd4\056\uffd4\057\uffd4\060\uffd4\061\uffd4\062\uffd4\001"
			+ "\002\000\112\002\uffdd\004\uffdd\005\uffdd\011\uffdd\012\uffdd"
			+ "\013\uffdd\015\uffdd\017\uffdd\020\uffdd\021\uffdd\022\uffdd\024"
			+ "\uffdd\026\uffdd\027\uffdd\030\uffdd\031\uffdd\032\uffdd\033\uffdd"
			+ "\034\uffdd\036\uffdd\041\uffdd\042\uffdd\043\uffdd\044\uffdd\045"
			+ "\056\046\uffdd\047\uffdd\050\uffdd\052\uffdd\054\uffdd\055\uffdd"
			+ "\056\uffdd\057\uffdd\060\uffdd\061\uffdd\062\uffdd\001\002\000"
			+ "\012\012\037\030\032\064\030\065\043\001\002\000\012"
			+ "\002\uff8d\011\uff8d\030\uff8d\035\uff8d\001\002\000\014\002"
			+ "\ufff6\011\ufff6\030\ufff6\035\ufff6\045\171\001\002\000\012"
			+ "\002\uffaf\011\uffaf\030\uffaf\035\230\001\002\000\036\007"
			+ "\047\010\031\012\037\024\025\025\052\030\032\051\026"
			+ "\053\027\055\046\057\022\063\035\064\030\065\043\067"
			+ "\033\001\002\000\010\002\uffad\011\234\030\uff8a\001\002"
			+ "\000\004\002\uffac\001\002\000\004\030\236\001\002\000"
			+ "\004\030\uff89\001\002\000\004\002\uffb6\001\002\000\012"
			+ "\012\037\030\032\064\030\065\043\001\002\000\006\002"
			+ "\uff88\043\242\001\002\000\004\002\uff8b\001\002\000\010"
			+ "\002\uff86\043\uff86\045\171\001\002\000\012\012\037\030"
			+ "\032\064\030\065\043\001\002\000\004\002\uff87\001\002"
			+ "\000\010\002\uffae\011\uffae\030\uffae\001\002\000\012\002"
			+ "\uff8c\011\uff8c\030\uff8c\042\073\001\002\000\006\002\uffb7"
			+ "\042\073\001\002\000\004\002\001\001\002\000\004\031"
			+ "\uffb4\001\002\000\010\022\uffa9\031\uffa9\032\uffa9\001\002"
			+ "\000\010\022\254\031\uffab\032\253\001\002\000\012\012"
			+ "\037\030\032\064\030\065\043\001\002\000\012\012\037"
			+ "\030\032\064\030\065\043\001\002\000\010\022\uffa8\031"
			+ "\uffa8\032\uffa8\001\002\000\004\005\260\001\002\000\006"
			+ "\005\uffa1\045\171\001\002\000\040\007\047\010\031\012"
			+ "\037\024\025\025\052\030\032\051\026\053\027\055\046"
			+ "\057\022\063\035\064\030\065\043\067\033\070\262\001"
			+ "\002\000\016\022\uffa5\027\076\031\uffa5\032\uffa5\036\075"
			+ "\043\264\001\002\000\012\022\uffa5\031\uffa5\032\uffa5\043"
			+ "\264\001\002\000\010\022\uffa7\031\uffa7\032\uffa7\001\002"
			+ "\000\012\012\037\030\032\064\030\065\043\001\002\000"
			+ "\010\022\uffa4\031\uffa4\032\uffa4\001\002\000\012\022\uffa3"
			+ "\031\uffa3\032\uffa3\043\272\001\002\000\004\046\270\001"
			+ "\002\000\036\007\047\010\031\012\037\024\025\025\052"
			+ "\030\032\051\026\053\027\055\046\057\022\063\035\064"
			+ "\030\065\043\067\033\001\002\000\016\022\uffa0\027\076"
			+ "\031\uffa0\032\uffa0\036\075\043\uffa0\001\002\000\012\012"
			+ "\037\030\032\064\030\065\043\001\002\000\010\022\uffa2"
			+ "\031\uffa2\032\uffa2\001\002\000\010\022\uffa6\031\uffa6\032"
			+ "\uffa6\001\002\000\004\005\277\001\002\000\006\005\uff9d"
			+ "\045\171\001\002\000\040\007\047\010\031\012\037\024"
			+ "\025\025\052\030\032\051\026\053\027\055\046\057\022"
			+ "\063\035\064\030\065\043\067\033\070\301\001\002\000"
			+ "\012\022\uff9e\031\uff9e\032\uff9e\042\073\001\002\000\010"
			+ "\022\uff9f\031\uff9f\032\uff9f\001\002\000\004\031\uffaa\001"
			+ "\002" });

	/** Access to parse-action table. */
	public short[][] action_table() {
		return _action_table;
	}

	/** <code>reduce_goto</code> table. */
	protected static final short[][] _reduce_table = unpackFromStrings(new String[] { "\000\300\000\010\023\004\024\005\071\007\001\001\000"
			+ "\012\041\250\042\254\043\251\064\247\001\001\000\002"
			+ "\001\001\000\002\001\001\000\036\004\023\006\245\010"
			+ "\037\012\040\013\047\014\044\015\043\016\041\017\035"
			+ "\021\050\034\052\035\022\036\054\037\053\001\001\000"
			+ "\002\001\001\000\012\003\013\052\012\053\015\054\011"
			+ "\001\001\000\002\001\001\000\036\004\023\006\033\010"
			+ "\037\012\040\013\047\014\044\015\043\016\041\017\035"
			+ "\021\050\034\052\035\022\036\054\037\053\001\001\000"
			+ "\002\001\001\000\002\001\001\000\002\001\001\000\002"
			+ "\001\001\000\010\003\013\052\012\053\020\001\001\000"
			+ "\002\001\001\000\016\004\023\021\222\034\052\035\022"
			+ "\036\054\037\053\001\001\000\002\001\001\000\002\001"
			+ "\001\000\030\004\023\010\037\012\040\013\047\014\044"
			+ "\015\216\021\050\034\052\035\022\036\054\037\053\001"
			+ "\001\000\044\004\023\006\066\007\067\010\037\012\040"
			+ "\013\047\014\044\015\043\016\041\017\035\021\050\034"
			+ "\052\035\022\036\054\037\053\062\065\063\214\001\001"
			+ "\000\042\004\023\006\066\007\067\010\037\012\040\013"
			+ "\047\014\044\015\043\016\041\017\035\021\050\034\052"
			+ "\035\022\036\054\037\053\062\212\001\001\000\002\001"
			+ "\001\000\002\001\001\000\002\001\001\000\002\001\001"
			+ "\000\010\047\162\060\157\061\161\001\001\000\002\001"
			+ "\001\000\002\001\001\000\002\001\001\000\002\001\001"
			+ "\000\002\001\001\000\002\001\001\000\002\001\001\000"
			+ "\002\001\001\000\004\033\133\001\001\000\016\004\023"
			+ "\021\131\034\052\035\022\036\054\037\053\001\001\000"
			+ "\036\004\023\010\037\012\040\013\047\014\044\015\043"
			+ "\016\041\017\115\020\116\021\050\034\052\035\022\036"
			+ "\054\037\053\001\001\000\002\001\001\000\002\001\001"
			+ "\000\002\001\001\000\002\001\001\000\002\001\001\000"
			+ "\002\001\001\000\014\034\052\035\057\036\061\037\060"
			+ "\040\056\001\001\000\002\001\001\000\002\001\001\000"
			+ "\002\001\001\000\002\001\001\000\002\001\001\000\044"
			+ "\004\023\006\066\007\067\010\037\012\040\013\047\014"
			+ "\044\015\043\016\041\017\035\021\050\034\052\035\022"
			+ "\036\054\037\053\062\065\063\064\001\001\000\002\001"
			+ "\001\000\002\001\001\000\002\001\001\000\002\001\001"
			+ "\000\042\004\023\006\066\007\067\010\037\012\040\013"
			+ "\047\014\044\015\043\016\041\017\035\021\050\034\052"
			+ "\035\022\036\054\037\053\062\071\001\001\000\002\001"
			+ "\001\000\034\004\023\010\037\012\040\013\047\014\044"
			+ "\015\043\016\041\017\073\021\050\034\052\035\022\036"
			+ "\054\037\053\001\001\000\002\001\001\000\032\004\023"
			+ "\010\037\012\040\013\047\014\044\015\043\016\101\021"
			+ "\050\034\052\035\022\036\054\037\053\001\001\000\032"
			+ "\004\023\010\037\012\040\013\047\014\044\015\043\016"
			+ "\076\021\050\034\052\035\022\036\054\037\053\001\001"
			+ "\000\002\001\001\000\030\004\023\010\037\012\040\013"
			+ "\047\014\044\015\100\021\050\034\052\035\022\036\054"
			+ "\037\053\001\001\000\002\001\001\000\002\001\001\000"
			+ "\002\001\001\000\022\004\023\010\037\012\114\021\050"
			+ "\034\052\035\022\036\054\037\053\001\001\000\022\004"
			+ "\023\010\037\012\113\021\050\034\052\035\022\036\054"
			+ "\037\053\001\001\000\022\004\023\010\037\012\106\021"
			+ "\050\034\052\035\022\036\054\037\053\001\001\000\002"
			+ "\001\001\000\020\004\023\010\112\021\050\034\052\035"
			+ "\022\036\054\037\053\001\001\000\020\004\023\010\111"
			+ "\021\050\034\052\035\022\036\054\037\053\001\001\000"
			+ "\002\001\001\000\002\001\001\000\002\001\001\000\002"
			+ "\001\001\000\002\001\001\000\004\070\117\001\001\000"
			+ "\006\005\120\072\123\001\001\000\002\001\001\000\034"
			+ "\004\023\010\037\012\040\013\047\014\044\015\043\016"
			+ "\041\017\127\021\050\034\052\035\022\036\054\037\053"
			+ "\001\001\000\034\004\023\010\037\012\040\013\047\014"
			+ "\044\015\043\016\041\017\124\021\050\034\052\035\022"
			+ "\036\054\037\053\001\001\000\002\001\001\000\002\001"
			+ "\001\000\034\004\023\010\037\012\040\013\047\014\044"
			+ "\015\043\016\041\017\126\021\050\034\052\035\022\036"
			+ "\054\037\053\001\001\000\002\001\001\000\002\001\001"
			+ "\000\002\001\001\000\002\001\001\000\024\004\023\010"
			+ "\037\012\040\013\156\021\050\034\052\035\022\036\054"
			+ "\037\053\001\001\000\024\004\023\010\037\012\040\013"
			+ "\155\021\050\034\052\035\022\036\054\037\053\001\001"
			+ "\000\002\001\001\000\002\001\001\000\002\001\001\000"
			+ "\002\001\001\000\002\001\001\000\002\001\001\000\024"
			+ "\004\023\010\037\012\040\013\150\021\050\034\052\035"
			+ "\022\036\054\037\053\001\001\000\002\001\001\000\024"
			+ "\004\023\010\037\012\040\013\145\021\050\034\052\035"
			+ "\022\036\054\037\053\001\001\000\002\001\001\000\002"
			+ "\001\001\000\002\001\001\000\002\001\001\000\024\004"
			+ "\023\010\037\012\040\013\154\021\050\034\052\035\022"
			+ "\036\054\037\053\001\001\000\024\004\023\010\037\012"
			+ "\040\013\153\021\050\034\052\035\022\036\054\037\053"
			+ "\001\001\000\002\001\001\000\002\001\001\000\002\001"
			+ "\001\000\002\001\001\000\002\001\001\000\002\001\001"
			+ "\000\002\001\001\000\002\001\001\000\020\025\167\034"
			+ "\052\035\165\036\054\037\053\050\166\066\164\001\001"
			+ "\000\002\001\001\000\002\001\001\000\002\001\001\000"
			+ "\002\001\001\000\012\034\052\035\171\036\054\037\053"
			+ "\001\001\000\002\001\001\000\020\025\167\034\052\035"
			+ "\165\036\054\037\053\050\166\066\173\001\001\000\002"
			+ "\001\001\000\016\032\177\034\052\035\201\036\054\037"
			+ "\053\073\200\001\001\000\002\001\001\000\002\001\001"
			+ "\000\002\001\001\000\002\001\001\000\002\001\001\000"
			+ "\002\001\001\000\002\001\001\000\002\001\001\000\036"
			+ "\004\023\006\206\010\037\012\040\013\047\014\044\015"
			+ "\043\016\041\017\035\021\050\034\052\035\022\036\054"
			+ "\037\053\001\001\000\002\001\001\000\012\034\052\035"
			+ "\210\036\054\037\053\001\001\000\002\001\001\000\002"
			+ "\001\001\000\002\001\001\000\002\001\001\000\002\001"
			+ "\001\000\002\001\001\000\002\001\001\000\044\004\023"
			+ "\006\066\007\067\010\037\012\040\013\047\014\044\015"
			+ "\043\016\041\017\035\021\050\034\052\035\022\036\054"
			+ "\037\053\062\065\063\220\001\001\000\002\001\001\000"
			+ "\002\001\001\000\002\001\001\000\020\025\225\026\224"
			+ "\027\226\034\052\035\165\036\054\037\053\001\001\000"
			+ "\002\001\001\000\002\001\001\000\004\022\230\001\001"
			+ "\000\040\004\023\006\244\010\037\011\243\012\040\013"
			+ "\047\014\044\015\043\016\041\017\035\021\050\034\052"
			+ "\035\022\036\054\037\053\001\001\000\010\045\232\055"
			+ "\231\056\234\001\001\000\002\001\001\000\002\001\001"
			+ "\000\002\001\001\000\002\001\001\000\020\025\240\034"
			+ "\052\035\165\036\054\037\053\046\236\067\237\001\001"
			+ "\000\002\001\001\000\002\001\001\000\002\001\001\000"
			+ "\020\025\240\034\052\035\165\036\054\037\053\046\236"
			+ "\067\242\001\001\000\002\001\001\000\002\001\001\000"
			+ "\002\001\001\000\002\001\001\000\002\001\001\000\002"
			+ "\001\001\000\002\001\001\000\012\041\250\042\254\043"
			+ "\251\064\301\001\001\000\016\025\275\031\274\034\052"
			+ "\035\165\036\054\037\053\001\001\000\016\025\256\030"
			+ "\255\034\052\035\165\036\054\037\053\001\001\000\002"
			+ "\001\001\000\002\001\001\000\002\001\001\000\034\004"
			+ "\023\010\037\012\040\013\047\014\044\015\043\016\041"
			+ "\017\260\021\050\034\052\035\022\036\054\037\053\001"
			+ "\001\000\004\057\273\001\001\000\004\057\262\001\001"
			+ "\000\002\001\001\000\016\034\052\035\266\036\054\037"
			+ "\053\044\265\065\264\001\001\000\002\001\001\000\002"
			+ "\001\001\000\002\001\001\000\034\004\023\010\037\012"
			+ "\040\013\047\014\044\015\043\016\041\017\270\021\050"
			+ "\034\052\035\022\036\054\037\053\001\001\000\002\001"
			+ "\001\000\016\034\052\035\266\036\054\037\053\044\265"
			+ "\065\272\001\001\000\002\001\001\000\002\001\001\000"
			+ "\002\001\001\000\002\001\001\000\036\004\023\006\277"
			+ "\010\037\012\040\013\047\014\044\015\043\016\041\017"
			+ "\035\021\050\034\052\035\022\036\054\037\053\001\001"
			+ "\000\002\001\001\000\002\001\001\000\002\001\001" });

	/** Access to <code>reduce_goto</code> table. */
	public short[][] reduce_table() {
		return _reduce_table;
	}

	/** Instance of action encapsulation class. */
	protected CUP$Parser$actions action_obj;

	/** Action encapsulation object initializer. */
	protected void init_actions() {
		action_obj = new CUP$Parser$actions(this);
	}

	/** Invoke a user supplied parse action. */
	public java_cup.runtime.Symbol do_action(int act_num,
			java_cup.runtime.lr_parser parser, java.util.Stack stack, int top)
			throws java.lang.Exception {
		/* call code in generated class */
		return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
	}

	/** Indicates start state. */
	public int start_state() {
		return 0;
	}

	/** Indicates start production. */
	public int start_production() {
		return 0;
	}

	/** <code>EOF</code> Symbol index. */
	public int EOF_sym() {
		return 0;
	}

	/** <code>error</code> Symbol index. */
	public int error_sym() {
		return 1;
	}

	/** User initialization code. */
	public void user_init() throws java.lang.Exception {

		scanner.init();

	}

	/** Scan to get the next Symbol. */
	public java_cup.runtime.Symbol scan() throws java.lang.Exception {

		return scanner.next_token();

	}

	// Generated from $Id: //open/mondrian/src/main/mondrian/olap/Parser.cup#38
	// $
	private Scanner scanner;

	private String queryString;

	private Connection mdxConnection;

	private FunTable funTable;

	private boolean load;

	/**
	 * Recursively parses an expression.
	 */
	Exp recursivelyParseExp(String s) {
		return new Parser().parseExpression(mdxConnection, s, false, funTable);
	}

	/**
	 * Parses a string to create a {@link Query}. Called only by
	 * {@link ConnectionBase#parseQuery}.
	 */
	Query parseInternal(Connection mdxConnection, String queryString,
			boolean debug, FunTable funTable, boolean load) {
		Symbol parse_tree = null;
		this.scanner = new StringScanner(queryString, debug);
		this.mdxConnection = mdxConnection;
		this.queryString = queryString;
		this.funTable = funTable;
		this.load = load;
		try {
			if (debug) {
				parse_tree = debug_parse();
			} else {
				parse_tree = parse();
			}
			return (Query) parse_tree.value;
		} catch (Exception e) {
			// "Error while parsing MDX statement '%1'"
			throw MondrianResource.instance().WhileParsingMdx
					.ex(queryString, e);
		} finally {
			this.scanner = null;
			this.mdxConnection = null;
			this.queryString = null;
			this.funTable = null;
		}
	}

	/**
	 * Parses a string to create an {@link Exp}. Called only by
	 * {@link ConnectionBase#parseExpression}.
	 */
	Exp parseExpression(Connection mdxConnection, String queryString,
			boolean debug, FunTable funTable) {
		Symbol parse_tree = null;
		this.scanner = new PrefixScanner(debug, new StringScanner(queryString,
				debug), new int[] { ParserSym._VALUE_EXPRESSION });
		this.mdxConnection = mdxConnection;
		this.queryString = queryString;
		this.funTable = funTable;
		try {
			if (debug) {
				parse_tree = debug_parse();
			} else {
				parse_tree = parse();
			}
			return (Exp) parse_tree.value;
		} catch (Exception e) {
			// "Syntax error while parsing MDX expression '%1'"
			throw MondrianResource.instance().WhileParsingMdxExpression.ex(
					queryString, e);
		} finally {
			this.scanner = null;
			this.mdxConnection = null;
			this.queryString = null;
			this.funTable = null;
		}
	}

	/**
	 * Scanner which returns a list of pre-programmed tokens, then switches to a
	 * parent scanner.
	 */
	private static class PrefixScanner extends Scanner {
		private final Scanner parent;

		private final int tokens[];

		private int i;

		PrefixScanner(boolean debug, Scanner parent, int[] tokens) {
			super(debug);
			this.parent = parent;
			this.tokens = tokens;
		}

		public void init() throws java.io.IOException {
			i = 0;
			parent.init();
		}

		public Symbol next_token() throws java.io.IOException {
			if (i < tokens.length) {
				return new Symbol(tokens[i++], 0, 0, null);
			}
			return parent.next_token();
		}

		void getLocation(Symbol symbol, int[] loc) {
			parent.getLocation(symbol, loc);
		}
	}

	/**
	 * Creates a {@link Query} object. Override this function to make your kind
	 * of query.
	 */
	protected Query makeQuery(Formula[] formulae, QueryAxis[] axes,
			String cube, Exp slicer, QueryPart[] cellProps) {
		final QueryAxis slicerAxis = slicer == null ? null : new QueryAxis(
				false, slicer, AxisOrdinal.SLICER,
				QueryAxis.SubtotalVisibility.Undefined, new Id[0]);
		return new Query(mdxConnection, formulae, axes, cube, slicerAxis,
				cellProps, load);
	}

	// Override lr_parser methods for NLS. With this error handling scheme,
	// all errors are fatal.
	public void report_fatal_error(String message, Object info)
			throws java.lang.Exception {
		done_parsing();
		try {
			report_error(message, info);
		} catch (Throwable e) {
			// "MDX parser cannot recover from previous error(s)"
			throw MondrianResource.instance().MdxFatalError.ex(e);
		}
	}

	// override lr_parser method
	public void report_error(String message, Object info) {
		// "Error: %1"
		throw MondrianResource.instance().MdxError.ex(message);
	}

	// override lr_parser method
	public void syntax_error(Symbol cur_token) {
		String s = cur_token.value.toString();
		if (cur_token.left != -1) {
			int loc[] = new int[2];
			scanner.getLocation(cur_token, loc);
			// "Syntax error at line %2, column %3, token '%1'"
			throw MondrianResource.instance().MdxSyntaxErrorAt.ex(s, Integer
					.toString(loc[0] + 1), Integer.toString(loc[1] + 1));
		} else {
			// "Syntax error at token '%1'"
			throw MondrianResource.instance().MdxSyntaxError.ex(s);
		}
	}

	public void unrecovered_syntax_error(Symbol cur_token)
			throws java.lang.Exception {
		// "Couldn't repair and continue parse"
		String sFatalSyntaxError = MondrianResource.instance().MdxFatalSyntaxError
				.str();
		report_fatal_error(sFatalSyntaxError, cur_token);
	}

	/**
	 * Returns whether the given identifier can possibly the name of an operator
	 * with property syntax.
	 * 
	 * <p>
	 * For example, <code>isFunCall("ORDINAL")</code> returns true because
	 * there is a "&lt;Level&gt;.Ordinal" property.
	 * </p>
	 */
	protected boolean isFunCall(String s) {
		return funTable.isProperty(s);
	}

	static Id[] toIdArray(List idList) {
		if (idList == null || idList.size() == 0) {
			return EmptyIdArray;
		} else {
			return (Id[]) idList.toArray(new Id[idList.size()]);
		}
	}

	static Exp[] toExpArray(List expList) {
		if (expList == null || expList.size() == 0) {
			return EmptyExpArray;
		} else {
			return (Exp[]) expList.toArray(new Exp[expList.size()]);
		}
	}

	static Formula[] toFormulaArray(List formulaList) {
		if (formulaList == null || formulaList.size() == 0) {
			return EmptyFormulaArray;
		} else {
			return (Formula[]) formulaList.toArray(new Formula[formulaList
					.size()]);
		}
	}

	static MemberProperty[] toMemberPropertyArray(List mpList) {
		if (mpList == null || mpList.size() == 0) {
			return EmptyMemberPropertyArray;
		} else {
			return (MemberProperty[]) mpList.toArray(new MemberProperty[mpList
					.size()]);
		}
	}

	static QueryPart[] toQueryPartArray(List qpList) {
		if (qpList == null || qpList.size() == 0) {
			return EmptyQueryPartArray;
		} else {
			return (QueryPart[]) qpList.toArray(new QueryPart[qpList.size()]);
		}
	}

	static QueryAxis[] toQueryAxisArray(List qpList) {
		if (qpList == null || qpList.size() == 0) {
			return EmptyQueryAxisArray;
		} else {
			return (QueryAxis[]) qpList.toArray(new QueryAxis[qpList.size()]);
		}
	}

	private static final MemberProperty[] EmptyMemberPropertyArray = new MemberProperty[0];

	private static final Exp[] EmptyExpArray = new Exp[0];

	private static final Formula[] EmptyFormulaArray = new Formula[0];

	private static final Id[] EmptyIdArray = new Id[0];

	private static final QueryPart[] EmptyQueryPartArray = new QueryPart[0];

	private static final QueryAxis[] EmptyQueryAxisArray = new QueryAxis[0];

}

/** Cup generated class to encapsulate user supplied action code. */
class CUP$Parser$actions {
	private final Parser parser;

	/** Constructor */
	CUP$Parser$actions(Parser parser) {
		this.parser = parser;
	}

	/** Method with the actual generated action code. */
	public final java_cup.runtime.Symbol CUP$Parser$do_action(
			int CUP$Parser$act_num,
			java_cup.runtime.lr_parser CUP$Parser$parser,
			java.util.Stack CUP$Parser$stack, int CUP$Parser$top)
			throws java.lang.Exception {
		/* Symbol object for return from actions */
		java_cup.runtime.Symbol CUP$Parser$result;

		/* select the action based on the action number */
		switch (CUP$Parser$act_num) {
		/* . . . . . . . . . . . . . . . . . . . . */
		case 123: // cell_property ::= compound_id
		{
			Object RESULT = null;

			// Default action for single-symbol production
			RESULT = (Id) ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top)).value;
			CUP$Parser$result = new java_cup.runtime.Symbol(
					36/* cell_property */,
					((java_cup.runtime.Symbol) CUP$Parser$stack
							.elementAt(CUP$Parser$top - 0)).left,
					((java_cup.runtime.Symbol) CUP$Parser$stack
							.elementAt(CUP$Parser$top - 0)).right, RESULT);
		}
			return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 122: // cell_property_list ::= cell_property COMMA
					// cell_property_list
		{
			List RESULT = null;
			int pleft = ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 2)).left;
			int pright = ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 2)).right;
			Object p = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 2)).value;
			int p1left = ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 0)).left;
			int p1right = ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 0)).right;
			List p1 = (List) ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 0)).value;

			p1.add(0, new CellProperty(p));
			RESULT = p1;

			CUP$Parser$result = new java_cup.runtime.Symbol(
					53/* cell_property_list */,
					((java_cup.runtime.Symbol) CUP$Parser$stack
							.elementAt(CUP$Parser$top - 2)).left,
					((java_cup.runtime.Symbol) CUP$Parser$stack
							.elementAt(CUP$Parser$top - 0)).right, RESULT);
		}
			return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 121: // cell_property_list ::= cell_property
		{
			List RESULT = null;
			int pleft = ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 0)).left;
			int pright = ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 0)).right;
			Object p = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 0)).value;

			RESULT = new LinkedList();
			RESULT.add(new CellProperty(p));

			CUP$Parser$result = new java_cup.runtime.Symbol(
					53/* cell_property_list */,
					((java_cup.runtime.Symbol) CUP$Parser$stack
							.elementAt(CUP$Parser$top - 0)).left,
					((java_cup.runtime.Symbol) CUP$Parser$stack
							.elementAt(CUP$Parser$top - 0)).right, RESULT);
		}
			return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 120: // cell_opt ::= CELL
		{
			Object RESULT = null;

			// Default action for single-symbol production
			RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top)).value;
			CUP$Parser$result = new java_cup.runtime.Symbol(35/* cell_opt */,
					((java_cup.runtime.Symbol) CUP$Parser$stack
							.elementAt(CUP$Parser$top - 0)).left,
					((java_cup.runtime.Symbol) CUP$Parser$stack
							.elementAt(CUP$Parser$top - 0)).right, RESULT);
		}
			return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 119: // cell_opt ::=
		{
			Object RESULT = null;

			CUP$Parser$result = new java_cup.runtime.Symbol(35/* cell_opt */,
					((java_cup.runtime.Symbol) CUP$Parser$stack
							.elementAt(CUP$Parser$top - 0)).right,
					((java_cup.runtime.Symbol) CUP$Parser$stack
							.elementAt(CUP$Parser$top - 0)).right, RESULT);
		}
			return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 118: // cell_props ::= cell_opt PROPERTIES cell_property_list
		{
			List RESULT = null;
			int p1left = ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 0)).left;
			int p1right = ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 0)).right;
			List p1 = (List) ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 0)).value;
			RESULT = p1;
			CUP$Parser$result = new java_cup.runtime.Symbol(43/* cell_props */,
					((java_cup.runtime.Symbol) CUP$Parser$stack
							.elementAt(CUP$Parser$top - 2)).left,
					((java_cup.runtime.Symbol) CUP$Parser$stack
							.elementAt(CUP$Parser$top - 0)).right, RESULT);
		}
			return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 117: // slicer_specification ::= expression
		{
			Exp RESULT = null;

			// Default action for single-symbol production
			RESULT = (Exp) ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top)).value;
			CUP$Parser$result = new java_cup.runtime.Symbol(
					7/* slicer_specification */,
					((java_cup.runtime.Symbol) CUP$Parser$stack
							.elementAt(CUP$Parser$top - 0)).left,
					((java_cup.runtime.Symbol) CUP$Parser$stack
							.elementAt(CUP$Parser$top - 0)).right, RESULT);
		}
			return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 116: // cube_specification ::= cube_name
		{
			Id RESULT = null;

			// Default action for single-symbol production
			RESULT = (Id) ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top)).value;
			CUP$Parser$result = new java_cup.runtime.Symbol(
					21/* cube_specification */,
					((java_cup.runtime.Symbol) CUP$Parser$stack
							.elementAt(CUP$Parser$top - 0)).left,
					((java_cup.runtime.Symbol) CUP$Parser$stack
							.elementAt(CUP$Parser$top - 0)).right, RESULT);
		}
			return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 115: // property ::= compound_id
		{
			Object RESULT = null;

			// Default action for single-symbol production
			RESULT = (Id) ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top)).value;
			CUP$Parser$result = new java_cup.runtime.Symbol(38/* property */,
					((java_cup.runtime.Symbol) CUP$Parser$stack
							.elementAt(CUP$Parser$top - 0)).left,
					((java_cup.runtime.Symbol) CUP$Parser$stack
							.elementAt(CUP$Parser$top - 0)).right, RESULT);
		}
			return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 114: // property_list ::= property COMMA property_list
		{
			List RESULT = null;
			int pleft = ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 2)).left;
			int pright = ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 2)).right;
			Object p = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 2)).value;
			int plleft = ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 0)).left;
			int plright = ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 0)).right;
			List pl = (List) ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 0)).value;

			pl.add(0, p);
			RESULT = pl;

			CUP$Parser$result = new java_cup.runtime.Symbol(
					52/* property_list */,
					((java_cup.runtime.Symbol) CUP$Parser$stack
							.elementAt(CUP$Parser$top - 2)).left,
					((java_cup.runtime.Symbol) CUP$Parser$stack
							.elementAt(CUP$Parser$top - 0)).right, RESULT);
		}
			return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 113: // property_list ::= property
		{
			List RESULT = null;
			int pleft = ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 0)).left;
			int pright = ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 0)).right;
			Object p = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 0)).value;

			RESULT = new LinkedList();
			RESULT.add(p);

			CUP$Parser$result = new java_cup.runtime.Symbol(
					52/* property_list */,
					((java_cup.runtime.Symbol) CUP$Parser$stack
							.elementAt(CUP$Parser$top - 0)).left,
					((java_cup.runtime.Symbol) CUP$Parser$stack
							.elementAt(CUP$Parser$top - 0)).right, RESULT);
		}
			return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 112: // dimension_opt ::= DIMENSION
		{
			Object RESULT = null;

			// Default action for single-symbol production
			RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top)).value;
			CUP$Parser$result = new java_cup.runtime.Symbol(
					37/* dimension_opt */,
					((java_cup.runtime.Symbol) CUP$Parser$stack
							.elementAt(CUP$Parser$top - 0)).left,
					((java_cup.runtime.Symbol) CUP$Parser$stack
							.elementAt(CUP$Parser$top - 0)).right, RESULT);
		}
			return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 111: // dimension_opt ::=
		{
			Object RESULT = null;

			CUP$Parser$result = new java_cup.runtime.Symbol(
					37/* dimension_opt */,
					((java_cup.runtime.Symbol) CUP$Parser$stack
							.elementAt(CUP$Parser$top - 0)).right,
					((java_cup.runtime.Symbol) CUP$Parser$stack
							.elementAt(CUP$Parser$top - 0)).right, RESULT);
		}
			return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 110: // dim_props ::= dimension_opt PROPERTIES property_list
		{
			List RESULT = null;
			int plleft = ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 0)).left;
			int plright = ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 0)).right;
			List pl = (List) ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 0)).value;
			RESULT = pl;
			CUP$Parser$result = new java_cup.runtime.Symbol(46/* dim_props */,
					((java_cup.runtime.Symbol) CUP$Parser$stack
							.elementAt(CUP$Parser$top - 2)).left,
					((java_cup.runtime.Symbol) CUP$Parser$stack
							.elementAt(CUP$Parser$top - 0)).right, RESULT);
		}
			return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 109: // axis_number ::= AXIS LPAREN NUMBER RPAREN
		{
			Double RESULT = null;
			int nleft = ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 1)).left;
			int nright = ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 1)).right;
			Double n = (Double) ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 1)).value;
			RESULT = n;
			CUP$Parser$result = new java_cup.runtime.Symbol(57/* axis_number */,
					((java_cup.runtime.Symbol) CUP$Parser$stack
							.elementAt(CUP$Parser$top - 3)).left,
					((java_cup.runtime.Symbol) CUP$Parser$stack
							.elementAt(CUP$Parser$top - 0)).right, RESULT);
		}
			return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 108: // axis_number ::= NUMBER
		{
			Double RESULT = null;

			// Default action for single-symbol production
			RESULT = (Double) ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top)).value;
			CUP$Parser$result = new java_cup.runtime.Symbol(57/* axis_number */,
					((java_cup.runtime.Symbol) CUP$Parser$stack
							.elementAt(CUP$Parser$top - 0)).left,
					((java_cup.runtime.Symbol) CUP$Parser$stack
							.elementAt(CUP$Parser$top - 0)).right, RESULT);
		}
			return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 107: // axis_name ::= identifier
		{
			String RESULT = null;
			int ileft = ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 0)).left;
			int iright = ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 0)).right;
			Id.Segment i = (Id.Segment) ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 0)).value;
			RESULT = i.name;
			CUP$Parser$result = new java_cup.runtime.Symbol(24/* axis_name */,
					((java_cup.runtime.Symbol) CUP$Parser$stack
							.elementAt(CUP$Parser$top - 0)).left,
					((java_cup.runtime.Symbol) CUP$Parser$stack
							.elementAt(CUP$Parser$top - 0)).right, RESULT);
		}
			return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 106: // dim_props_opt ::= dim_props
		{
			List RESULT = null;

			// Default action for single-symbol production
			RESULT = (List) ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top)).value;
			CUP$Parser$result = new java_cup.runtime.Symbol(
					47/* dim_props_opt */,
					((java_cup.runtime.Symbol) CUP$Parser$stack
							.elementAt(CUP$Parser$top - 0)).left,
					((java_cup.runtime.Symbol) CUP$Parser$stack
							.elementAt(CUP$Parser$top - 0)).right, RESULT);
		}
			return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 105: // dim_props_opt ::=
		{
			List RESULT = null;

			CUP$Parser$result = new java_cup.runtime.Symbol(
					47/* dim_props_opt */,
					((java_cup.runtime.Symbol) CUP$Parser$stack
							.elementAt(CUP$Parser$top - 0)).right,
					((java_cup.runtime.Symbol) CUP$Parser$stack
							.elementAt(CUP$Parser$top - 0)).right, RESULT);
		}
			return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 104: // non_empty_opt ::= NON EMPTY
		{
			Boolean RESULT = null;
			RESULT = Boolean.TRUE;
			CUP$Parser$result = new java_cup.runtime.Symbol(
					40/* non_empty_opt */,
					((java_cup.runtime.Symbol) CUP$Parser$stack
							.elementAt(CUP$Parser$top - 1)).left,
					((java_cup.runtime.Symbol) CUP$Parser$stack
							.elementAt(CUP$Parser$top - 0)).right, RESULT);
		}
			return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 103: // non_empty_opt ::=
		{
			Boolean RESULT = null;
			RESULT = Boolean.FALSE;
			CUP$Parser$result = new java_cup.runtime.Symbol(
					40/* non_empty_opt */,
					((java_cup.runtime.Symbol) CUP$Parser$stack
							.elementAt(CUP$Parser$top - 0)).right,
					((java_cup.runtime.Symbol) CUP$Parser$stack
							.elementAt(CUP$Parser$top - 0)).right, RESULT);
		}
			return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 102: // axis_specification ::= non_empty_opt expression
					// dim_props_opt ON axis_number
		{
			QueryAxis RESULT = null;
			int bleft = ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 4)).left;
			int bright = ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 4)).right;
			Boolean b = (Boolean) ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 4)).value;
			int sleft = ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 3)).left;
			int sright = ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 3)).right;
			Exp s = (Exp) ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 3)).value;
			int dpleft = ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 2)).left;
			int dpright = ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 2)).right;
			List dp = (List) ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 2)).value;
			int nleft = ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 0)).left;
			int nright = ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 0)).right;
			Double n = (Double) ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 0)).value;

			double d = n.doubleValue();
			int index = (int) d;

			// AxisOrdinal values go from -2 to 4. The negative values represent
			// special cases, so are ignored.
			if (index < 0 || index != d
					|| index >= AxisOrdinal.MaxLogicalOrdinal) {
				throw MondrianResource.instance().InvalidAxis.ex(
						AxisOrdinal.MaxLogicalOrdinal, d);
			}

			AxisOrdinal axis = AxisOrdinal.forLogicalOrdinal(index);
			RESULT = new QueryAxis(b.booleanValue(), s, axis,
					QueryAxis.SubtotalVisibility.Undefined, Parser
							.toIdArray(dp));

			CUP$Parser$result = new java_cup.runtime.Symbol(
					1/* axis_specification */,
					((java_cup.runtime.Symbol) CUP$Parser$stack
							.elementAt(CUP$Parser$top - 4)).left,
					((java_cup.runtime.Symbol) CUP$Parser$stack
							.elementAt(CUP$Parser$top - 0)).right, RESULT);
		}
			return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 101: // axis_specification ::= non_empty_opt expression
					// dim_props_opt ON axis_name
		{
			QueryAxis RESULT = null;
			int bleft = ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 4)).left;
			int bright = ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 4)).right;
			Boolean b = (Boolean) ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 4)).value;
			int sleft = ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 3)).left;
			int sright = ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 3)).right;
			Exp s = (Exp) ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 3)).value;
			int dpleft = ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 2)).left;
			int dpright = ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 2)).right;
			List dp = (List) ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 2)).value;
			int aleft = ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 0)).left;
			int aright = ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 0)).right;
			String a = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 0)).value;

			AxisOrdinal axis = AxisOrdinal.valueOf(a.toUpperCase());
			RESULT = new QueryAxis(b.booleanValue(), s, axis,
					QueryAxis.SubtotalVisibility.Undefined, Parser
							.toIdArray(dp));

			CUP$Parser$result = new java_cup.runtime.Symbol(
					1/* axis_specification */,
					((java_cup.runtime.Symbol) CUP$Parser$stack
							.elementAt(CUP$Parser$top - 4)).left,
					((java_cup.runtime.Symbol) CUP$Parser$stack
							.elementAt(CUP$Parser$top - 0)).right, RESULT);
		}
			return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 100: // set_name ::= compound_id
		{
			Id RESULT = null;

			// Default action for single-symbol production
			RESULT = (Id) ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top)).value;
			CUP$Parser$result = new java_cup.runtime.Symbol(23/* set_name */,
					((java_cup.runtime.Symbol) CUP$Parser$stack
							.elementAt(CUP$Parser$top - 0)).left,
					((java_cup.runtime.Symbol) CUP$Parser$stack
							.elementAt(CUP$Parser$top - 0)).right, RESULT);
		}
			return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 99: // set_specification ::= SET set_name AS expression
		{
			Formula RESULT = null;
			int nleft = ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 2)).left;
			int nright = ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 2)).right;
			Id n = (Id) ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 2)).value;
			int eleft = ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 0)).left;
			int eright = ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 0)).right;
			Exp e = (Exp) ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 0)).value;

			RESULT = new Formula(n, e);

			CUP$Parser$result = new java_cup.runtime.Symbol(
					32/* set_specification */,
					((java_cup.runtime.Symbol) CUP$Parser$stack
							.elementAt(CUP$Parser$top - 3)).left,
					((java_cup.runtime.Symbol) CUP$Parser$stack
							.elementAt(CUP$Parser$top - 0)).right, RESULT);
		}
			return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 98: // set_specification ::= SET set_name AS FORMULA_STRING
		{
			Formula RESULT = null;
			int nleft = ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 2)).left;
			int nright = ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 2)).right;
			Id n = (Id) ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 2)).value;
			int sleft = ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 0)).left;
			int sright = ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 0)).right;
			String s = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 0)).value;

			Exp e = parser.recursivelyParseExp(s);
			RESULT = new Formula(n, e);

			CUP$Parser$result = new java_cup.runtime.Symbol(
					32/* set_specification */,
					((java_cup.runtime.Symbol) CUP$Parser$stack
							.elementAt(CUP$Parser$top - 3)).left,
					((java_cup.runtime.Symbol) CUP$Parser$stack
							.elementAt(CUP$Parser$top - 0)).right, RESULT);
		}
			return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 97: // member_property_definition ::= identifier EQ
					// value_expression
		{
			MemberProperty RESULT = null;
			int idleft = ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 2)).left;
			int idright = ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 2)).right;
			Id.Segment id = (Id.Segment) ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 2)).value;
			int eleft = ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 0)).left;
			int eright = ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 0)).right;
			Exp e = (Exp) ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 0)).value;

			RESULT = new MemberProperty(id.name, e);

			CUP$Parser$result = new java_cup.runtime.Symbol(
					34/* member_property_definition */,
					((java_cup.runtime.Symbol) CUP$Parser$stack
							.elementAt(CUP$Parser$top - 2)).left,
					((java_cup.runtime.Symbol) CUP$Parser$stack
							.elementAt(CUP$Parser$top - 0)).right, RESULT);
		}
			return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 96: // member_name ::= compound_id
		{
			Id RESULT = null;

			// Default action for single-symbol production
			RESULT = (Id) ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top)).value;
			CUP$Parser$result = new java_cup.runtime.Symbol(22/* member_name */,
					((java_cup.runtime.Symbol) CUP$Parser$stack
							.elementAt(CUP$Parser$top - 0)).left,
					((java_cup.runtime.Symbol) CUP$Parser$stack
							.elementAt(CUP$Parser$top - 0)).right, RESULT);
		}
			return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 95: // member_property_def_list ::= member_property_definition
					// COMMA member_property_def_list
		{
			List RESULT = null;
			int hdleft = ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 2)).left;
			int hdright = ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 2)).right;
			MemberProperty hd = (MemberProperty) ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 2)).value;
			int tlleft = ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 0)).left;
			int tlright = ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 0)).right;
			List tl = (List) ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 0)).value;

			RESULT = tl;
			RESULT.add(0, hd);

			CUP$Parser$result = new java_cup.runtime.Symbol(
					51/* member_property_def_list */,
					((java_cup.runtime.Symbol) CUP$Parser$stack
							.elementAt(CUP$Parser$top - 2)).left,
					((java_cup.runtime.Symbol) CUP$Parser$stack
							.elementAt(CUP$Parser$top - 0)).right, RESULT);
		}
			return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 94: // member_property_def_list ::= member_property_definition
		{
			List RESULT = null;
			int mleft = ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 0)).left;
			int mright = ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 0)).right;
			MemberProperty m = (MemberProperty) ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 0)).value;

			RESULT = new LinkedList();
			RESULT.add(m);

			CUP$Parser$result = new java_cup.runtime.Symbol(
					51/* member_property_def_list */,
					((java_cup.runtime.Symbol) CUP$Parser$stack
							.elementAt(CUP$Parser$top - 0)).left,
					((java_cup.runtime.Symbol) CUP$Parser$stack
							.elementAt(CUP$Parser$top - 0)).right, RESULT);
		}
			return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 93: // comma_member_property_def_list_opt ::= COMMA
					// member_property_def_list
		{
			List RESULT = null;
			int lleft = ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 0)).left;
			int lright = ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 0)).right;
			List l = (List) ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 0)).value;

			RESULT = l;

			CUP$Parser$result = new java_cup.runtime.Symbol(
					45/* comma_member_property_def_list_opt */,
					((java_cup.runtime.Symbol) CUP$Parser$stack
							.elementAt(CUP$Parser$top - 1)).left,
					((java_cup.runtime.Symbol) CUP$Parser$stack
							.elementAt(CUP$Parser$top - 0)).right, RESULT);
		}
			return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 92: // comma_member_property_def_list_opt ::=
		{
			List RESULT = null;

			RESULT = new LinkedList();

			CUP$Parser$result = new java_cup.runtime.Symbol(
					45/* comma_member_property_def_list_opt */,
					((java_cup.runtime.Symbol) CUP$Parser$stack
							.elementAt(CUP$Parser$top - 0)).right,
					((java_cup.runtime.Symbol) CUP$Parser$stack
							.elementAt(CUP$Parser$top - 0)).right, RESULT);
		}
			return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 91: // member_specification ::= MEMBER member_name AS
					// value_expression comma_member_property_def_list_opt
		{
			Formula RESULT = null;
			int mleft = ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 3)).left;
			int mright = ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 3)).right;
			Id m = (Id) ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 3)).value;
			int eleft = ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 1)).left;
			int eright = ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 1)).right;
			Exp e = (Exp) ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 1)).value;
			int lleft = ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 0)).left;
			int lright = ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 0)).right;
			List l = (List) ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 0)).value;

			RESULT = new Formula(m, e, Parser.toMemberPropertyArray(l));

			CUP$Parser$result = new java_cup.runtime.Symbol(
					31/* member_specification */,
					((java_cup.runtime.Symbol) CUP$Parser$stack
							.elementAt(CUP$Parser$top - 4)).left,
					((java_cup.runtime.Symbol) CUP$Parser$stack
							.elementAt(CUP$Parser$top - 0)).right, RESULT);
		}
			return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 90: // member_specification ::= MEMBER member_name AS
					// FORMULA_STRING comma_member_property_def_list_opt
		{
			Formula RESULT = null;
			int mleft = ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 3)).left;
			int mright = ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 3)).right;
			Id m = (Id) ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 3)).value;
			int sleft = ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 1)).left;
			int sright = ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 1)).right;
			String s = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 1)).value;
			int lleft = ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 0)).left;
			int lright = ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 0)).right;
			List l = (List) ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 0)).value;

			Exp e = parser.recursivelyParseExp(s);
			RESULT = new Formula(m, e, Parser.toMemberPropertyArray(l));

			CUP$Parser$result = new java_cup.runtime.Symbol(
					31/* member_specification */,
					((java_cup.runtime.Symbol) CUP$Parser$stack
							.elementAt(CUP$Parser$top - 4)).left,
					((java_cup.runtime.Symbol) CUP$Parser$stack
							.elementAt(CUP$Parser$top - 0)).right, RESULT);
		}
			return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 89: // single_formula_specification ::= set_specification
		{
			Formula RESULT = null;

			// Default action for single-symbol production
			RESULT = (Formula) ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top)).value;
			CUP$Parser$result = new java_cup.runtime.Symbol(
					33/* single_formula_specification */,
					((java_cup.runtime.Symbol) CUP$Parser$stack
							.elementAt(CUP$Parser$top - 0)).left,
					((java_cup.runtime.Symbol) CUP$Parser$stack
							.elementAt(CUP$Parser$top - 0)).right, RESULT);
		}
			return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 88: // single_formula_specification ::= member_specification
		{
			Formula RESULT = null;

			// Default action for single-symbol production
			RESULT = (Formula) ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top)).value;
			CUP$Parser$result = new java_cup.runtime.Symbol(
					33/* single_formula_specification */,
					((java_cup.runtime.Symbol) CUP$Parser$stack
							.elementAt(CUP$Parser$top - 0)).left,
					((java_cup.runtime.Symbol) CUP$Parser$stack
							.elementAt(CUP$Parser$top - 0)).right, RESULT);
		}
			return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 87: // formula_specification ::= single_formula_specification
					// formula_specification
		{
			List RESULT = null;
			int hdleft = ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 1)).left;
			int hdright = ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 1)).right;
			Formula hd = (Formula) ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 1)).value;
			int tlleft = ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 0)).left;
			int tlright = ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 0)).right;
			List tl = (List) ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 0)).value;

			tl.add(0, hd);
			RESULT = tl;

			CUP$Parser$result = new java_cup.runtime.Symbol(
					50/* formula_specification */,
					((java_cup.runtime.Symbol) CUP$Parser$stack
							.elementAt(CUP$Parser$top - 1)).left,
					((java_cup.runtime.Symbol) CUP$Parser$stack
							.elementAt(CUP$Parser$top - 0)).right, RESULT);
		}
			return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 86: // formula_specification ::= single_formula_specification
		{
			List RESULT = null;
			int eleft = ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 0)).left;
			int eright = ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 0)).right;
			Formula e = (Formula) ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 0)).value;

			RESULT = new LinkedList();
			RESULT.add(e);

			CUP$Parser$result = new java_cup.runtime.Symbol(
					50/* formula_specification */,
					((java_cup.runtime.Symbol) CUP$Parser$stack
							.elementAt(CUP$Parser$top - 0)).left,
					((java_cup.runtime.Symbol) CUP$Parser$stack
							.elementAt(CUP$Parser$top - 0)).right, RESULT);
		}
			return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 85: // cell_props_opt ::= cell_props
		{
			List RESULT = null;

			// Default action for single-symbol production
			RESULT = (List) ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top)).value;
			CUP$Parser$result = new java_cup.runtime.Symbol(
					44/* cell_props_opt */,
					((java_cup.runtime.Symbol) CUP$Parser$stack
							.elementAt(CUP$Parser$top - 0)).left,
					((java_cup.runtime.Symbol) CUP$Parser$stack
							.elementAt(CUP$Parser$top - 0)).right, RESULT);
		}
			return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 84: // cell_props_opt ::=
		{
			List RESULT = null;

			RESULT = new LinkedList();

			CUP$Parser$result = new java_cup.runtime.Symbol(
					44/* cell_props_opt */,
					((java_cup.runtime.Symbol) CUP$Parser$stack
							.elementAt(CUP$Parser$top - 0)).right,
					((java_cup.runtime.Symbol) CUP$Parser$stack
							.elementAt(CUP$Parser$top - 0)).right, RESULT);
		}
			return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 83: // where_clause_opt ::= WHERE slicer_specification
		{
			Exp RESULT = null;
			int sleft = ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 0)).left;
			int sright = ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 0)).right;
			Exp s = (Exp) ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 0)).value;
			RESULT = s;
			CUP$Parser$result = new java_cup.runtime.Symbol(
					16/* where_clause_opt */,
					((java_cup.runtime.Symbol) CUP$Parser$stack
							.elementAt(CUP$Parser$top - 1)).left,
					((java_cup.runtime.Symbol) CUP$Parser$stack
							.elementAt(CUP$Parser$top - 0)).right, RESULT);
		}
			return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 82: // where_clause_opt ::=
		{
			Exp RESULT = null;

			CUP$Parser$result = new java_cup.runtime.Symbol(
					16/* where_clause_opt */,
					((java_cup.runtime.Symbol) CUP$Parser$stack
							.elementAt(CUP$Parser$top - 0)).right,
					((java_cup.runtime.Symbol) CUP$Parser$stack
							.elementAt(CUP$Parser$top - 0)).right, RESULT);
		}
			return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 81: // axis_specification_list ::= axis_specification COMMA
					// axis_specification_list
		{
			List RESULT = null;
			int eleft = ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 2)).left;
			int eright = ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 2)).right;
			QueryAxis e = (QueryAxis) ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 2)).value;
			int listleft = ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 0)).left;
			int listright = ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 0)).right;
			List list = (List) ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 0)).value;

			list.add(0, e);
			RESULT = list;

			CUP$Parser$result = new java_cup.runtime.Symbol(
					41/* axis_specification_list */,
					((java_cup.runtime.Symbol) CUP$Parser$stack
							.elementAt(CUP$Parser$top - 2)).left,
					((java_cup.runtime.Symbol) CUP$Parser$stack
							.elementAt(CUP$Parser$top - 0)).right, RESULT);
		}
			return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 80: // axis_specification_list ::= axis_specification
		{
			List RESULT = null;
			int ileft = ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 0)).left;
			int iright = ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 0)).right;
			QueryAxis i = (QueryAxis) ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 0)).value;

			RESULT = new LinkedList();
			RESULT.add(i);

			CUP$Parser$result = new java_cup.runtime.Symbol(
					41/* axis_specification_list */,
					((java_cup.runtime.Symbol) CUP$Parser$stack
							.elementAt(CUP$Parser$top - 0)).left,
					((java_cup.runtime.Symbol) CUP$Parser$stack
							.elementAt(CUP$Parser$top - 0)).right, RESULT);
		}
			return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 79: // axis_specification_list_opt ::= axis_specification_list
		{
			List RESULT = null;

			// Default action for single-symbol production
			RESULT = (List) ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top)).value;
			CUP$Parser$result = new java_cup.runtime.Symbol(
					42/* axis_specification_list_opt */,
					((java_cup.runtime.Symbol) CUP$Parser$stack
							.elementAt(CUP$Parser$top - 0)).left,
					((java_cup.runtime.Symbol) CUP$Parser$stack
							.elementAt(CUP$Parser$top - 0)).right, RESULT);
		}
			return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 78: // axis_specification_list_opt ::=
		{
			List RESULT = null;

			RESULT = new LinkedList();

			CUP$Parser$result = new java_cup.runtime.Symbol(
					42/* axis_specification_list_opt */,
					((java_cup.runtime.Symbol) CUP$Parser$stack
							.elementAt(CUP$Parser$top - 0)).right,
					((java_cup.runtime.Symbol) CUP$Parser$stack
							.elementAt(CUP$Parser$top - 0)).right, RESULT);
		}
			return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 77: // with_formula_specification_opt ::= WITH
					// formula_specification
		{
			List RESULT = null;
			int fleft = ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 0)).left;
			int fright = ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 0)).right;
			List f = (List) ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 0)).value;

			RESULT = f;

			CUP$Parser$result = new java_cup.runtime.Symbol(
					55/* with_formula_specification_opt */,
					((java_cup.runtime.Symbol) CUP$Parser$stack
							.elementAt(CUP$Parser$top - 1)).left,
					((java_cup.runtime.Symbol) CUP$Parser$stack
							.elementAt(CUP$Parser$top - 0)).right, RESULT);
		}
			return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 76: // with_formula_specification_opt ::=
		{
			List RESULT = null;

			RESULT = new LinkedList();

			CUP$Parser$result = new java_cup.runtime.Symbol(
					55/* with_formula_specification_opt */,
					((java_cup.runtime.Symbol) CUP$Parser$stack
							.elementAt(CUP$Parser$top - 0)).right,
					((java_cup.runtime.Symbol) CUP$Parser$stack
							.elementAt(CUP$Parser$top - 0)).right, RESULT);
		}
			return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 75: // select_statement ::= with_formula_specification_opt
					// SELECT axis_specification_list_opt FROM
					// cube_specification where_clause_opt cell_props_opt
		{
			QueryPart RESULT = null;
			int fleft = ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 6)).left;
			int fright = ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 6)).right;
			List f = (List) ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 6)).value;
			int aleft = ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 4)).left;
			int aright = ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 4)).right;
			List a = (List) ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 4)).value;
			int cleft = ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 2)).left;
			int cright = ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 2)).right;
			Id c = (Id) ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 2)).value;
			int wleft = ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 1)).left;
			int wright = ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 1)).right;
			Exp w = (Exp) ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 1)).value;
			int cpleft = ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 0)).left;
			int cpright = ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 0)).right;
			List cp = (List) ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 0)).value;

			Parser parser = (Parser) CUP$Parser$parser;
			// We want 'Sales', not '[Sales]', and can't handle 'Schema.Sales'
			// yet.
			String cubeName = c.getElement(0).name;
			RESULT = parser.makeQuery(Parser.toFormulaArray(f), Parser
					.toQueryAxisArray(a), cubeName, w, Parser
					.toQueryPartArray(cp));

			CUP$Parser$result = new java_cup.runtime.Symbol(
					17/* select_statement */,
					((java_cup.runtime.Symbol) CUP$Parser$stack
							.elementAt(CUP$Parser$top - 6)).left,
					((java_cup.runtime.Symbol) CUP$Parser$stack
							.elementAt(CUP$Parser$top - 0)).right, RESULT);
		}
			return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 74: // statement ::= _VALUE_EXPRESSION expression
		{
			QueryPart RESULT = null;
			int eleft = ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 0)).left;
			int eright = ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 0)).right;
			Exp e = (Exp) ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 0)).value;
			RESULT = (QueryPart) e;
			CUP$Parser$result = new java_cup.runtime.Symbol(18/* statement */,
					((java_cup.runtime.Symbol) CUP$Parser$stack
							.elementAt(CUP$Parser$top - 1)).left,
					((java_cup.runtime.Symbol) CUP$Parser$stack
							.elementAt(CUP$Parser$top - 0)).right, RESULT);
		}
			return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 73: // statement ::= select_statement
		{
			QueryPart RESULT = null;

			// Default action for single-symbol production
			RESULT = (QueryPart) ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top)).value;
			CUP$Parser$result = new java_cup.runtime.Symbol(18/* statement */,
					((java_cup.runtime.Symbol) CUP$Parser$stack
							.elementAt(CUP$Parser$top - 0)).left,
					((java_cup.runtime.Symbol) CUP$Parser$stack
							.elementAt(CUP$Parser$top - 0)).right, RESULT);
		}
			return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 72: // exp_list ::= expression_or_empty COMMA exp_list
		{
			List RESULT = null;
			int eleft = ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 2)).left;
			int eright = ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 2)).right;
			Exp e = (Exp) ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 2)).value;
			int listleft = ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 0)).left;
			int listright = ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 0)).right;
			List list = (List) ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 0)).value;

			list.add(0, e);
			RESULT = list;

			CUP$Parser$result = new java_cup.runtime.Symbol(48/* exp_list */,
					((java_cup.runtime.Symbol) CUP$Parser$stack
							.elementAt(CUP$Parser$top - 2)).left,
					((java_cup.runtime.Symbol) CUP$Parser$stack
							.elementAt(CUP$Parser$top - 0)).right, RESULT);
		}
			return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 71: // exp_list ::= expression
		{
			List RESULT = null;
			int eleft = ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 0)).left;
			int eright = ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 0)).right;
			Exp e = (Exp) ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 0)).value;

			RESULT = new LinkedList();
			RESULT.add(e);

			CUP$Parser$result = new java_cup.runtime.Symbol(48/* exp_list */,
					((java_cup.runtime.Symbol) CUP$Parser$stack
							.elementAt(CUP$Parser$top - 0)).left,
					((java_cup.runtime.Symbol) CUP$Parser$stack
							.elementAt(CUP$Parser$top - 0)).right, RESULT);
		}
			return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 70: // exp_list_opt ::= exp_list
		{
			List RESULT = null;

			// Default action for single-symbol production
			RESULT = (List) ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top)).value;
			CUP$Parser$result = new java_cup.runtime.Symbol(
					49/* exp_list_opt */,
					((java_cup.runtime.Symbol) CUP$Parser$stack
							.elementAt(CUP$Parser$top - 0)).left,
					((java_cup.runtime.Symbol) CUP$Parser$stack
							.elementAt(CUP$Parser$top - 0)).right, RESULT);
		}
			return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 69: // exp_list_opt ::=
		{
			List RESULT = null;

			RESULT = new LinkedList();

			CUP$Parser$result = new java_cup.runtime.Symbol(
					49/* exp_list_opt */,
					((java_cup.runtime.Symbol) CUP$Parser$stack
							.elementAt(CUP$Parser$top - 0)).right,
					((java_cup.runtime.Symbol) CUP$Parser$stack
							.elementAt(CUP$Parser$top - 0)).right, RESULT);
		}
			return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 68: // expression_or_empty ::=
		{
			Exp RESULT = null;

			RESULT = new UnresolvedFunCall("", Syntax.Empty, new Exp[] {});

			CUP$Parser$result = new java_cup.runtime.Symbol(
					5/* expression_or_empty */,
					((java_cup.runtime.Symbol) CUP$Parser$stack
							.elementAt(CUP$Parser$top - 0)).right,
					((java_cup.runtime.Symbol) CUP$Parser$stack
							.elementAt(CUP$Parser$top - 0)).right, RESULT);
		}
			return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 67: // expression_or_empty ::= expression
		{
			Exp RESULT = null;

			// Default action for single-symbol production
			RESULT = (Exp) ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top)).value;
			CUP$Parser$result = new java_cup.runtime.Symbol(
					5/* expression_or_empty */,
					((java_cup.runtime.Symbol) CUP$Parser$stack
							.elementAt(CUP$Parser$top - 0)).left,
					((java_cup.runtime.Symbol) CUP$Parser$stack
							.elementAt(CUP$Parser$top - 0)).right, RESULT);
		}
			return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 66: // expression ::= value_expression
		{
			Exp RESULT = null;

			// Default action for single-symbol production
			RESULT = (Exp) ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top)).value;
			CUP$Parser$result = new java_cup.runtime.Symbol(4/* expression */,
					((java_cup.runtime.Symbol) CUP$Parser$stack
							.elementAt(CUP$Parser$top - 0)).left,
					((java_cup.runtime.Symbol) CUP$Parser$stack
							.elementAt(CUP$Parser$top - 0)).right, RESULT);
		}
			return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 65: // expression ::= expression COLON value_expression
		{
			Exp RESULT = null;
			int xleft = ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 2)).left;
			int xright = ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 2)).right;
			Exp x = (Exp) ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 2)).value;
			int yleft = ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 0)).left;
			int yright = ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 0)).right;
			Exp y = (Exp) ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 0)).value;
			// range yields set
			RESULT = new UnresolvedFunCall(":", Syntax.Infix,
					new Exp[] { x, y });

			CUP$Parser$result = new java_cup.runtime.Symbol(4/* expression */,
					((java_cup.runtime.Symbol) CUP$Parser$stack
							.elementAt(CUP$Parser$top - 2)).left,
					((java_cup.runtime.Symbol) CUP$Parser$stack
							.elementAt(CUP$Parser$top - 0)).right, RESULT);
		}
			return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 64: // comp_op ::= GE
		{
			String RESULT = null;
			RESULT = ">=";
			CUP$Parser$result = new java_cup.runtime.Symbol(25/* comp_op */,
					((java_cup.runtime.Symbol) CUP$Parser$stack
							.elementAt(CUP$Parser$top - 0)).left,
					((java_cup.runtime.Symbol) CUP$Parser$stack
							.elementAt(CUP$Parser$top - 0)).right, RESULT);
		}
			return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 63: // comp_op ::= LE
		{
			String RESULT = null;
			RESULT = "<=";
			CUP$Parser$result = new java_cup.runtime.Symbol(25/* comp_op */,
					((java_cup.runtime.Symbol) CUP$Parser$stack
							.elementAt(CUP$Parser$top - 0)).left,
					((java_cup.runtime.Symbol) CUP$Parser$stack
							.elementAt(CUP$Parser$top - 0)).right, RESULT);
		}
			return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 62: // comp_op ::= GT
		{
			String RESULT = null;
			RESULT = ">";
			CUP$Parser$result = new java_cup.runtime.Symbol(25/* comp_op */,
					((java_cup.runtime.Symbol) CUP$Parser$stack
							.elementAt(CUP$Parser$top - 0)).left,
					((java_cup.runtime.Symbol) CUP$Parser$stack
							.elementAt(CUP$Parser$top - 0)).right, RESULT);
		}
			return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 61: // comp_op ::= LT
		{
			String RESULT = null;
			RESULT = "<";
			CUP$Parser$result = new java_cup.runtime.Symbol(25/* comp_op */,
					((java_cup.runtime.Symbol) CUP$Parser$stack
							.elementAt(CUP$Parser$top - 0)).left,
					((java_cup.runtime.Symbol) CUP$Parser$stack
							.elementAt(CUP$Parser$top - 0)).right, RESULT);
		}
			return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 60: // comp_op ::= NE
		{
			String RESULT = null;
			RESULT = "<>";
			CUP$Parser$result = new java_cup.runtime.Symbol(25/* comp_op */,
					((java_cup.runtime.Symbol) CUP$Parser$stack
							.elementAt(CUP$Parser$top - 0)).left,
					((java_cup.runtime.Symbol) CUP$Parser$stack
							.elementAt(CUP$Parser$top - 0)).right, RESULT);
		}
			return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 59: // comp_op ::= EQ
		{
			String RESULT = null;
			RESULT = "=";
			CUP$Parser$result = new java_cup.runtime.Symbol(25/* comp_op */,
					((java_cup.runtime.Symbol) CUP$Parser$stack
							.elementAt(CUP$Parser$top - 0)).left,
					((java_cup.runtime.Symbol) CUP$Parser$stack
							.elementAt(CUP$Parser$top - 0)).right, RESULT);
		}
			return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 58: // else_clause_opt ::= ELSE value_expression
		{
			Exp RESULT = null;
			int xleft = ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 0)).left;
			int xright = ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 0)).right;
			Exp x = (Exp) ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 0)).value;

			RESULT = x;

			CUP$Parser$result = new java_cup.runtime.Symbol(
					3/* else_clause_opt */,
					((java_cup.runtime.Symbol) CUP$Parser$stack
							.elementAt(CUP$Parser$top - 1)).left,
					((java_cup.runtime.Symbol) CUP$Parser$stack
							.elementAt(CUP$Parser$top - 0)).right, RESULT);
		}
			return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 57: // else_clause_opt ::=
		{
			Exp RESULT = null;

			CUP$Parser$result = new java_cup.runtime.Symbol(
					3/* else_clause_opt */,
					((java_cup.runtime.Symbol) CUP$Parser$stack
							.elementAt(CUP$Parser$top - 0)).right,
					((java_cup.runtime.Symbol) CUP$Parser$stack
							.elementAt(CUP$Parser$top - 0)).right, RESULT);
		}
			return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 56: // when_clause ::= WHEN value_expression THEN
					// value_expression
		{
			Exp[] RESULT = null;
			int xleft = ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 2)).left;
			int xright = ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 2)).right;
			Exp x = (Exp) ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 2)).value;
			int yleft = ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 0)).left;
			int yright = ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 0)).right;
			Exp y = (Exp) ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 0)).value;

			RESULT = new Exp[] { x, y };

			CUP$Parser$result = new java_cup.runtime.Symbol(56/* when_clause */,
					((java_cup.runtime.Symbol) CUP$Parser$stack
							.elementAt(CUP$Parser$top - 3)).left,
					((java_cup.runtime.Symbol) CUP$Parser$stack
							.elementAt(CUP$Parser$top - 0)).right, RESULT);
		}
			return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 55: // when_list ::= when_list when_clause
		{
			List RESULT = null;
			int xleft = ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 1)).left;
			int xright = ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 1)).right;
			List x = (List) ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 1)).value;
			int yleft = ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 0)).left;
			int yright = ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 0)).right;
			Exp[] y = (Exp[]) ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 0)).value;

			RESULT = x;
			x.add(y);

			CUP$Parser$result = new java_cup.runtime.Symbol(54/* when_list */,
					((java_cup.runtime.Symbol) CUP$Parser$stack
							.elementAt(CUP$Parser$top - 1)).left,
					((java_cup.runtime.Symbol) CUP$Parser$stack
							.elementAt(CUP$Parser$top - 0)).right, RESULT);
		}
			return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 54: // when_list ::=
		{
			List RESULT = null;

			RESULT = new ArrayList();

			CUP$Parser$result = new java_cup.runtime.Symbol(54/* when_list */,
					((java_cup.runtime.Symbol) CUP$Parser$stack
							.elementAt(CUP$Parser$top - 0)).right,
					((java_cup.runtime.Symbol) CUP$Parser$stack
							.elementAt(CUP$Parser$top - 0)).right, RESULT);
		}
			return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 53: // value_expression_opt ::= value_expression
		{
			Exp RESULT = null;

			// Default action for single-symbol production
			RESULT = (Exp) ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top)).value;
			CUP$Parser$result = new java_cup.runtime.Symbol(
					14/* value_expression_opt */,
					((java_cup.runtime.Symbol) CUP$Parser$stack
							.elementAt(CUP$Parser$top - 0)).left,
					((java_cup.runtime.Symbol) CUP$Parser$stack
							.elementAt(CUP$Parser$top - 0)).right, RESULT);
		}
			return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 52: // value_expression_opt ::=
		{
			Exp RESULT = null;

			CUP$Parser$result = new java_cup.runtime.Symbol(
					14/* value_expression_opt */,
					((java_cup.runtime.Symbol) CUP$Parser$stack
							.elementAt(CUP$Parser$top - 0)).right,
					((java_cup.runtime.Symbol) CUP$Parser$stack
							.elementAt(CUP$Parser$top - 0)).right, RESULT);
		}
			return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 51: // case_expression ::= CASE value_expression_opt when_list
					// else_clause_opt END
		{
			Exp RESULT = null;
			int xleft = ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 3)).left;
			int xright = ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 3)).right;
			Exp x = (Exp) ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 3)).value;
			int yleft = ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 2)).left;
			int yright = ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 2)).right;
			List y = (List) ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 2)).value;
			int zleft = ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 1)).left;
			int zright = ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 1)).right;
			Exp z = (Exp) ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 1)).value;

			List v = new ArrayList();
			if (x != null) {
				v.add(x);
			}
			for (int i = 0; i < y.size(); i++) {
				Exp[] exps = (Exp[]) y.get(i);
				Util.assertTrue(exps.length == 2);
				v.add(exps[0]);
				v.add(exps[1]);
			}
			if (z != null) {
				v.add(z);
			}
			if (x == null) {
				RESULT = new UnresolvedFunCall("_CaseTest", Syntax.Case, Parser
						.toExpArray(v));
			} else {
				RESULT = new UnresolvedFunCall("_CaseMatch", Syntax.Case,
						Parser.toExpArray(v));
			}

			CUP$Parser$result = new java_cup.runtime.Symbol(
					2/* case_expression */,
					((java_cup.runtime.Symbol) CUP$Parser$stack
							.elementAt(CUP$Parser$top - 4)).left,
					((java_cup.runtime.Symbol) CUP$Parser$stack
							.elementAt(CUP$Parser$top - 0)).right, RESULT);
		}
			return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 50: // value_expression_primary ::= case_expression
		{
			Exp RESULT = null;

			// Default action for single-symbol production
			RESULT = (Exp) ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top)).value;
			CUP$Parser$result = new java_cup.runtime.Symbol(
					15/* value_expression_primary */,
					((java_cup.runtime.Symbol) CUP$Parser$stack
							.elementAt(CUP$Parser$top - 0)).left,
					((java_cup.runtime.Symbol) CUP$Parser$stack
							.elementAt(CUP$Parser$top - 0)).right, RESULT);
		}
			return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 49: // value_expression_primary ::= NULL
		{
			Exp RESULT = null;

			RESULT = Literal.nullValue;

			CUP$Parser$result = new java_cup.runtime.Symbol(
					15/* value_expression_primary */,
					((java_cup.runtime.Symbol) CUP$Parser$stack
							.elementAt(CUP$Parser$top - 0)).left,
					((java_cup.runtime.Symbol) CUP$Parser$stack
							.elementAt(CUP$Parser$top - 0)).right, RESULT);
		}
			return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 48: // value_expression_primary ::= LBRACE exp_list_opt RBRACE
		{
			Exp RESULT = null;
			int lisleft = ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 1)).left;
			int lisright = ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 1)).right;
			List lis = (List) ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 1)).value;
			// set built from sets/tuples
			RESULT = new UnresolvedFunCall("{}", Syntax.Braces, Parser
					.toExpArray(lis));

			CUP$Parser$result = new java_cup.runtime.Symbol(
					15/* value_expression_primary */,
					((java_cup.runtime.Symbol) CUP$Parser$stack
							.elementAt(CUP$Parser$top - 2)).left,
					((java_cup.runtime.Symbol) CUP$Parser$stack
							.elementAt(CUP$Parser$top - 0)).right, RESULT);
		}
			return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 47: // value_expression_primary ::= LPAREN exp_list RPAREN
		{
			Exp RESULT = null;
			int lisleft = ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 1)).left;
			int lisright = ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 1)).right;
			List lis = (List) ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 1)).value;

			// Whereas ([Sales],[Time]) and () are tuples, ([Sales]) and (5)
			// are just expressions.
			RESULT = new UnresolvedFunCall("()", Syntax.Parentheses, Parser
					.toExpArray(lis));

			CUP$Parser$result = new java_cup.runtime.Symbol(
					15/* value_expression_primary */,
					((java_cup.runtime.Symbol) CUP$Parser$stack
							.elementAt(CUP$Parser$top - 2)).left,
					((java_cup.runtime.Symbol) CUP$Parser$stack
							.elementAt(CUP$Parser$top - 0)).right, RESULT);
		}
			return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 46: // value_expression_primary ::= CAST LPAREN expression AS
					// identifier RPAREN
		{
			Exp RESULT = null;
			int eleft = ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 3)).left;
			int eright = ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 3)).right;
			Exp e = (Exp) ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 3)).value;
			int tleft = ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 1)).left;
			int tright = ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 1)).right;
			Id.Segment t = (Id.Segment) ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 1)).value;

			RESULT = new UnresolvedFunCall("CAST", Syntax.Cast, new Exp[] { e,
					Literal.createSymbol(t.name) });

			CUP$Parser$result = new java_cup.runtime.Symbol(
					15/* value_expression_primary */,
					((java_cup.runtime.Symbol) CUP$Parser$stack
							.elementAt(CUP$Parser$top - 5)).left,
					((java_cup.runtime.Symbol) CUP$Parser$stack
							.elementAt(CUP$Parser$top - 0)).right, RESULT);
		}
			return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 45: // value_expression_primary ::= identifier LPAREN
					// exp_list_opt RPAREN
		{
			Exp RESULT = null;
			int ileft = ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 3)).left;
			int iright = ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 3)).right;
			Id.Segment i = (Id.Segment) ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 3)).value;
			int lisleft = ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 1)).left;
			int lisright = ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 1)).right;
			List lis = (List) ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 1)).value;

			RESULT = new UnresolvedFunCall(i.name, Syntax.Function, Parser
					.toExpArray(lis));

			CUP$Parser$result = new java_cup.runtime.Symbol(
					15/* value_expression_primary */,
					((java_cup.runtime.Symbol) CUP$Parser$stack
							.elementAt(CUP$Parser$top - 3)).left,
					((java_cup.runtime.Symbol) CUP$Parser$stack
							.elementAt(CUP$Parser$top - 0)).right, RESULT);
		}
			return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 44: // value_expression_primary ::= value_expression_primary DOT
					// identifier LPAREN exp_list_opt RPAREN
		{
			Exp RESULT = null;
			int ileft = ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 5)).left;
			int iright = ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 5)).right;
			Exp i = (Exp) ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 5)).value;
			int jleft = ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 3)).left;
			int jright = ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 3)).right;
			Id.Segment j = (Id.Segment) ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 3)).value;
			int lisleft = ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 1)).left;
			int lisright = ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 1)).right;
			List lis = (List) ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 1)).value;

			lis.add(0, i);
			RESULT = new UnresolvedFunCall(j.name, Syntax.Method, Parser
					.toExpArray(lis));

			CUP$Parser$result = new java_cup.runtime.Symbol(
					15/* value_expression_primary */,
					((java_cup.runtime.Symbol) CUP$Parser$stack
							.elementAt(CUP$Parser$top - 5)).left,
					((java_cup.runtime.Symbol) CUP$Parser$stack
							.elementAt(CUP$Parser$top - 0)).right, RESULT);
		}
			return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 43: // value_expression_primary ::= value_expression_primary DOT
					// amp_quoted_identifier
		{
			Exp RESULT = null;
			int ileft = ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 2)).left;
			int iright = ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 2)).right;
			Exp i = (Exp) ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 2)).value;
			int jleft = ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 0)).left;
			int jright = ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 0)).right;
			Id.Segment j = (Id.Segment) ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 0)).value;

			if (i instanceof Id) {
				RESULT = ((Id) i).append(j);
			} else {
				RESULT = new UnresolvedFunCall(j.name,
						Syntax.AmpersandQuotedProperty, new Exp[] { i });
			}

			CUP$Parser$result = new java_cup.runtime.Symbol(
					15/* value_expression_primary */,
					((java_cup.runtime.Symbol) CUP$Parser$stack
							.elementAt(CUP$Parser$top - 2)).left,
					((java_cup.runtime.Symbol) CUP$Parser$stack
							.elementAt(CUP$Parser$top - 0)).right, RESULT);
		}
			return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 42: // value_expression_primary ::= value_expression_primary DOT
					// quoted_identifier
		{
			Exp RESULT = null;
			int ileft = ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 2)).left;
			int iright = ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 2)).right;
			Exp i = (Exp) ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 2)).value;
			int jleft = ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 0)).left;
			int jright = ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 0)).right;
			Id.Segment j = (Id.Segment) ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 0)).value;

			if (i instanceof Id) {
				RESULT = ((Id) i).append(j);
			} else {
				RESULT = new UnresolvedFunCall(j.name, Syntax.QuotedProperty,
						new Exp[] { i });
			}

			CUP$Parser$result = new java_cup.runtime.Symbol(
					15/* value_expression_primary */,
					((java_cup.runtime.Symbol) CUP$Parser$stack
							.elementAt(CUP$Parser$top - 2)).left,
					((java_cup.runtime.Symbol) CUP$Parser$stack
							.elementAt(CUP$Parser$top - 0)).right, RESULT);
		}
			return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 41: // value_expression_primary ::= value_expression_primary DOT
					// unquoted_identifier
		{
			Exp RESULT = null;
			int ileft = ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 2)).left;
			int iright = ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 2)).right;
			Exp i = (Exp) ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 2)).value;
			int jleft = ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 0)).left;
			int jright = ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 0)).right;
			Id.Segment j = (Id.Segment) ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 0)).value;

			if (i instanceof Id && !parser.isFunCall(j.name)) {
				RESULT = ((Id) i).append(j);
			} else {
				RESULT = new UnresolvedFunCall(j.name, Syntax.Property,
						new Exp[] { i });
			}

			CUP$Parser$result = new java_cup.runtime.Symbol(
					15/* value_expression_primary */,
					((java_cup.runtime.Symbol) CUP$Parser$stack
							.elementAt(CUP$Parser$top - 2)).left,
					((java_cup.runtime.Symbol) CUP$Parser$stack
							.elementAt(CUP$Parser$top - 0)).right, RESULT);
		}
			return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 40: // value_expression_primary ::= identifier
		{
			Exp RESULT = null;
			int ileft = ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 0)).left;
			int iright = ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 0)).right;
			Id.Segment i = (Id.Segment) ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 0)).value;

			RESULT = new Id(i);

			CUP$Parser$result = new java_cup.runtime.Symbol(
					15/* value_expression_primary */,
					((java_cup.runtime.Symbol) CUP$Parser$stack
							.elementAt(CUP$Parser$top - 0)).left,
					((java_cup.runtime.Symbol) CUP$Parser$stack
							.elementAt(CUP$Parser$top - 0)).right, RESULT);
		}
			return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 39: // value_expression_primary ::= NUMBER
		{
			Exp RESULT = null;
			int dleft = ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 0)).left;
			int dright = ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 0)).right;
			Double d = (Double) ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 0)).value;

			RESULT = Literal.create(d);

			CUP$Parser$result = new java_cup.runtime.Symbol(
					15/* value_expression_primary */,
					((java_cup.runtime.Symbol) CUP$Parser$stack
							.elementAt(CUP$Parser$top - 0)).left,
					((java_cup.runtime.Symbol) CUP$Parser$stack
							.elementAt(CUP$Parser$top - 0)).right, RESULT);
		}
			return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 38: // value_expression_primary ::= STRING
		{
			Exp RESULT = null;
			int sleft = ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 0)).left;
			int sright = ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 0)).right;
			String s = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 0)).value;

			RESULT = Literal.createString(s);

			CUP$Parser$result = new java_cup.runtime.Symbol(
					15/* value_expression_primary */,
					((java_cup.runtime.Symbol) CUP$Parser$stack
							.elementAt(CUP$Parser$top - 0)).left,
					((java_cup.runtime.Symbol) CUP$Parser$stack
							.elementAt(CUP$Parser$top - 0)).right, RESULT);
		}
			return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 37: // factor ::= MINUS value_expression_primary
		{
			Exp RESULT = null;
			int pleft = ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 0)).left;
			int pright = ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 0)).right;
			Exp p = (Exp) ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 0)).value;

			RESULT = new UnresolvedFunCall("-", Syntax.Prefix, new Exp[] { p });

			CUP$Parser$result = new java_cup.runtime.Symbol(6/* factor */,
					((java_cup.runtime.Symbol) CUP$Parser$stack
							.elementAt(CUP$Parser$top - 1)).left,
					((java_cup.runtime.Symbol) CUP$Parser$stack
							.elementAt(CUP$Parser$top - 0)).right, RESULT);
		}
			return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 36: // factor ::= PLUS value_expression_primary
		{
			Exp RESULT = null;
			int pleft = ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 0)).left;
			int pright = ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 0)).right;
			Exp p = (Exp) ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 0)).value;

			RESULT = p;

			CUP$Parser$result = new java_cup.runtime.Symbol(6/* factor */,
					((java_cup.runtime.Symbol) CUP$Parser$stack
							.elementAt(CUP$Parser$top - 1)).left,
					((java_cup.runtime.Symbol) CUP$Parser$stack
							.elementAt(CUP$Parser$top - 0)).right, RESULT);
		}
			return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 35: // factor ::= value_expression_primary
		{
			Exp RESULT = null;

			// Default action for single-symbol production
			RESULT = (Exp) ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top)).value;
			CUP$Parser$result = new java_cup.runtime.Symbol(6/* factor */,
					((java_cup.runtime.Symbol) CUP$Parser$stack
							.elementAt(CUP$Parser$top - 0)).left,
					((java_cup.runtime.Symbol) CUP$Parser$stack
							.elementAt(CUP$Parser$top - 0)).right, RESULT);
		}
			return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 34: // term ::= term SOLIDUS factor
		{
			Exp RESULT = null;
			int xleft = ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 2)).left;
			int xright = ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 2)).right;
			Exp x = (Exp) ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 2)).value;
			int yleft = ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 0)).left;
			int yright = ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 0)).right;
			Exp y = (Exp) ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 0)).value;

			RESULT = new UnresolvedFunCall("/", Syntax.Infix,
					new Exp[] { x, y });

			CUP$Parser$result = new java_cup.runtime.Symbol(8/* term */,
					((java_cup.runtime.Symbol) CUP$Parser$stack
							.elementAt(CUP$Parser$top - 2)).left,
					((java_cup.runtime.Symbol) CUP$Parser$stack
							.elementAt(CUP$Parser$top - 0)).right, RESULT);
		}
			return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 33: // term ::= term ASTERISK factor
		{
			Exp RESULT = null;
			int xleft = ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 2)).left;
			int xright = ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 2)).right;
			Exp x = (Exp) ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 2)).value;
			int yleft = ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 0)).left;
			int yright = ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 0)).right;
			Exp y = (Exp) ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 0)).value;

			RESULT = new UnresolvedFunCall("*", Syntax.Infix,
					new Exp[] { x, y });

			CUP$Parser$result = new java_cup.runtime.Symbol(8/* term */,
					((java_cup.runtime.Symbol) CUP$Parser$stack
							.elementAt(CUP$Parser$top - 2)).left,
					((java_cup.runtime.Symbol) CUP$Parser$stack
							.elementAt(CUP$Parser$top - 0)).right, RESULT);
		}
			return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 32: // term ::= factor
		{
			Exp RESULT = null;

			// Default action for single-symbol production
			RESULT = (Exp) ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top)).value;
			CUP$Parser$result = new java_cup.runtime.Symbol(8/* term */,
					((java_cup.runtime.Symbol) CUP$Parser$stack
							.elementAt(CUP$Parser$top - 0)).left,
					((java_cup.runtime.Symbol) CUP$Parser$stack
							.elementAt(CUP$Parser$top - 0)).right, RESULT);
		}
			return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 31: // term2 ::= term2 CONCAT term
		{
			Exp RESULT = null;
			int xleft = ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 2)).left;
			int xright = ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 2)).right;
			Exp x = (Exp) ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 2)).value;
			int yleft = ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 0)).left;
			int yright = ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 0)).right;
			Exp y = (Exp) ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 0)).value;

			RESULT = new UnresolvedFunCall("||", Syntax.Infix,
					new Exp[] { x, y });

			CUP$Parser$result = new java_cup.runtime.Symbol(9/* term2 */,
					((java_cup.runtime.Symbol) CUP$Parser$stack
							.elementAt(CUP$Parser$top - 2)).left,
					((java_cup.runtime.Symbol) CUP$Parser$stack
							.elementAt(CUP$Parser$top - 0)).right, RESULT);
		}
			return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 30: // term2 ::= term2 MINUS term
		{
			Exp RESULT = null;
			int xleft = ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 2)).left;
			int xright = ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 2)).right;
			Exp x = (Exp) ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 2)).value;
			int yleft = ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 0)).left;
			int yright = ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 0)).right;
			Exp y = (Exp) ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 0)).value;

			RESULT = new UnresolvedFunCall("-", Syntax.Infix,
					new Exp[] { x, y });

			CUP$Parser$result = new java_cup.runtime.Symbol(9/* term2 */,
					((java_cup.runtime.Symbol) CUP$Parser$stack
							.elementAt(CUP$Parser$top - 2)).left,
					((java_cup.runtime.Symbol) CUP$Parser$stack
							.elementAt(CUP$Parser$top - 0)).right, RESULT);
		}
			return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 29: // term2 ::= term2 PLUS term
		{
			Exp RESULT = null;
			int xleft = ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 2)).left;
			int xright = ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 2)).right;
			Exp x = (Exp) ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 2)).value;
			int yleft = ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 0)).left;
			int yright = ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 0)).right;
			Exp y = (Exp) ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 0)).value;

			RESULT = new UnresolvedFunCall("+", Syntax.Infix,
					new Exp[] { x, y });

			CUP$Parser$result = new java_cup.runtime.Symbol(9/* term2 */,
					((java_cup.runtime.Symbol) CUP$Parser$stack
							.elementAt(CUP$Parser$top - 2)).left,
					((java_cup.runtime.Symbol) CUP$Parser$stack
							.elementAt(CUP$Parser$top - 0)).right, RESULT);
		}
			return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 28: // term2 ::= term
		{
			Exp RESULT = null;

			// Default action for single-symbol production
			RESULT = (Exp) ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top)).value;
			CUP$Parser$result = new java_cup.runtime.Symbol(9/* term2 */,
					((java_cup.runtime.Symbol) CUP$Parser$stack
							.elementAt(CUP$Parser$top - 0)).left,
					((java_cup.runtime.Symbol) CUP$Parser$stack
							.elementAt(CUP$Parser$top - 0)).right, RESULT);
		}
			return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 27: // term3 ::= term3 NOT IN term2
		{
			Exp RESULT = null;
			int xleft = ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 3)).left;
			int xright = ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 3)).right;
			Exp x = (Exp) ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 3)).value;
			int yleft = ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 0)).left;
			int yright = ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 0)).right;
			Exp y = (Exp) ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 0)).value;

			RESULT = new UnresolvedFunCall("NOT", Syntax.Prefix,
					new Exp[] { new UnresolvedFunCall("IN", Syntax.Infix,
							new Exp[] { x, y }) });

			CUP$Parser$result = new java_cup.runtime.Symbol(10/* term3 */,
					((java_cup.runtime.Symbol) CUP$Parser$stack
							.elementAt(CUP$Parser$top - 3)).left,
					((java_cup.runtime.Symbol) CUP$Parser$stack
							.elementAt(CUP$Parser$top - 0)).right, RESULT);
		}
			return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 26: // term3 ::= term3 IN term2
		{
			Exp RESULT = null;
			int xleft = ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 2)).left;
			int xright = ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 2)).right;
			Exp x = (Exp) ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 2)).value;
			int yleft = ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 0)).left;
			int yright = ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 0)).right;
			Exp y = (Exp) ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 0)).value;

			RESULT = new UnresolvedFunCall("IN", Syntax.Infix,
					new Exp[] { x, y });

			CUP$Parser$result = new java_cup.runtime.Symbol(10/* term3 */,
					((java_cup.runtime.Symbol) CUP$Parser$stack
							.elementAt(CUP$Parser$top - 2)).left,
					((java_cup.runtime.Symbol) CUP$Parser$stack
							.elementAt(CUP$Parser$top - 0)).right, RESULT);
		}
			return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 25: // term3 ::= term3 NOT MATCHES term2
		{
			Exp RESULT = null;
			int xleft = ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 3)).left;
			int xright = ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 3)).right;
			Exp x = (Exp) ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 3)).value;
			int yleft = ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 0)).left;
			int yright = ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 0)).right;
			Exp y = (Exp) ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 0)).value;

			RESULT = new UnresolvedFunCall("NOT", Syntax.Prefix,
					new Exp[] { new UnresolvedFunCall("MATCHES", Syntax.Infix,
							new Exp[] { x, y }) });

			CUP$Parser$result = new java_cup.runtime.Symbol(10/* term3 */,
					((java_cup.runtime.Symbol) CUP$Parser$stack
							.elementAt(CUP$Parser$top - 3)).left,
					((java_cup.runtime.Symbol) CUP$Parser$stack
							.elementAt(CUP$Parser$top - 0)).right, RESULT);
		}
			return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 24: // term3 ::= term3 MATCHES term2
		{
			Exp RESULT = null;
			int xleft = ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 2)).left;
			int xright = ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 2)).right;
			Exp x = (Exp) ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 2)).value;
			int yleft = ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 0)).left;
			int yright = ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 0)).right;
			Exp y = (Exp) ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 0)).value;

			RESULT = new UnresolvedFunCall("MATCHES", Syntax.Infix, new Exp[] {
					x, y });

			CUP$Parser$result = new java_cup.runtime.Symbol(10/* term3 */,
					((java_cup.runtime.Symbol) CUP$Parser$stack
							.elementAt(CUP$Parser$top - 2)).left,
					((java_cup.runtime.Symbol) CUP$Parser$stack
							.elementAt(CUP$Parser$top - 0)).right, RESULT);
		}
			return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 23: // term3 ::= term3 IS EMPTY
		{
			Exp RESULT = null;
			int xleft = ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 2)).left;
			int xright = ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 2)).right;
			Exp x = (Exp) ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 2)).value;

			RESULT = new UnresolvedFunCall("IS EMPTY", Syntax.Postfix,
					new Exp[] { x });

			CUP$Parser$result = new java_cup.runtime.Symbol(10/* term3 */,
					((java_cup.runtime.Symbol) CUP$Parser$stack
							.elementAt(CUP$Parser$top - 2)).left,
					((java_cup.runtime.Symbol) CUP$Parser$stack
							.elementAt(CUP$Parser$top - 0)).right, RESULT);
		}
			return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 22: // term3 ::= term3 IS term2
		{
			Exp RESULT = null;
			int xleft = ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 2)).left;
			int xright = ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 2)).right;
			Exp x = (Exp) ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 2)).value;
			int yleft = ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 0)).left;
			int yright = ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 0)).right;
			Exp y = (Exp) ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 0)).value;
			// e.g. "x IS y"; but "x IS NULL" is handled elsewhere
			RESULT = new UnresolvedFunCall("IS", Syntax.Infix,
					new Exp[] { x, y });

			CUP$Parser$result = new java_cup.runtime.Symbol(10/* term3 */,
					((java_cup.runtime.Symbol) CUP$Parser$stack
							.elementAt(CUP$Parser$top - 2)).left,
					((java_cup.runtime.Symbol) CUP$Parser$stack
							.elementAt(CUP$Parser$top - 0)).right, RESULT);
		}
			return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 21: // term3 ::= term3 IS NULL
		{
			Exp RESULT = null;
			int xleft = ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 2)).left;
			int xright = ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 2)).right;
			Exp x = (Exp) ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 2)).value;

			RESULT = new UnresolvedFunCall("IS NULL", Syntax.Postfix,
					new Exp[] { x });

			CUP$Parser$result = new java_cup.runtime.Symbol(10/* term3 */,
					((java_cup.runtime.Symbol) CUP$Parser$stack
							.elementAt(CUP$Parser$top - 2)).left,
					((java_cup.runtime.Symbol) CUP$Parser$stack
							.elementAt(CUP$Parser$top - 0)).right, RESULT);
		}
			return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 20: // term3 ::= term3 comp_op term2
		{
			Exp RESULT = null;
			int xleft = ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 2)).left;
			int xright = ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 2)).right;
			Exp x = (Exp) ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 2)).value;
			int opleft = ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 1)).left;
			int opright = ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 1)).right;
			String op = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 1)).value;
			int yleft = ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 0)).left;
			int yright = ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 0)).right;
			Exp y = (Exp) ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 0)).value;
			// e.g. "1 < 5"
			RESULT = new UnresolvedFunCall(op, Syntax.Infix, new Exp[] { x, y });

			CUP$Parser$result = new java_cup.runtime.Symbol(10/* term3 */,
					((java_cup.runtime.Symbol) CUP$Parser$stack
							.elementAt(CUP$Parser$top - 2)).left,
					((java_cup.runtime.Symbol) CUP$Parser$stack
							.elementAt(CUP$Parser$top - 0)).right, RESULT);
		}
			return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 19: // term3 ::= term2
		{
			Exp RESULT = null;

			// Default action for single-symbol production
			RESULT = (Exp) ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top)).value;
			CUP$Parser$result = new java_cup.runtime.Symbol(10/* term3 */,
					((java_cup.runtime.Symbol) CUP$Parser$stack
							.elementAt(CUP$Parser$top - 0)).left,
					((java_cup.runtime.Symbol) CUP$Parser$stack
							.elementAt(CUP$Parser$top - 0)).right, RESULT);
		}
			return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 18: // term4 ::= NOT term4
		{
			Exp RESULT = null;
			int pleft = ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 0)).left;
			int pright = ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 0)).right;
			Exp p = (Exp) ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 0)).value;

			RESULT = new UnresolvedFunCall("NOT", Syntax.Prefix,
					new Exp[] { p });

			CUP$Parser$result = new java_cup.runtime.Symbol(11/* term4 */,
					((java_cup.runtime.Symbol) CUP$Parser$stack
							.elementAt(CUP$Parser$top - 1)).left,
					((java_cup.runtime.Symbol) CUP$Parser$stack
							.elementAt(CUP$Parser$top - 0)).right, RESULT);
		}
			return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 17: // term4 ::= term3
		{
			Exp RESULT = null;

			// Default action for single-symbol production
			RESULT = (Exp) ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top)).value;
			CUP$Parser$result = new java_cup.runtime.Symbol(11/* term4 */,
					((java_cup.runtime.Symbol) CUP$Parser$stack
							.elementAt(CUP$Parser$top - 0)).left,
					((java_cup.runtime.Symbol) CUP$Parser$stack
							.elementAt(CUP$Parser$top - 0)).right, RESULT);
		}
			return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 16: // term5 ::= term5 AND term4
		{
			Exp RESULT = null;
			int xleft = ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 2)).left;
			int xright = ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 2)).right;
			Exp x = (Exp) ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 2)).value;
			int yleft = ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 0)).left;
			int yright = ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 0)).right;
			Exp y = (Exp) ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 0)).value;

			RESULT = new UnresolvedFunCall("AND", Syntax.Infix, new Exp[] { x,
					y });

			CUP$Parser$result = new java_cup.runtime.Symbol(12/* term5 */,
					((java_cup.runtime.Symbol) CUP$Parser$stack
							.elementAt(CUP$Parser$top - 2)).left,
					((java_cup.runtime.Symbol) CUP$Parser$stack
							.elementAt(CUP$Parser$top - 0)).right, RESULT);
		}
			return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 15: // term5 ::= term4
		{
			Exp RESULT = null;

			// Default action for single-symbol production
			RESULT = (Exp) ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top)).value;
			CUP$Parser$result = new java_cup.runtime.Symbol(12/* term5 */,
					((java_cup.runtime.Symbol) CUP$Parser$stack
							.elementAt(CUP$Parser$top - 0)).left,
					((java_cup.runtime.Symbol) CUP$Parser$stack
							.elementAt(CUP$Parser$top - 0)).right, RESULT);
		}
			return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 14: // value_expression ::= value_expression XOR term5
		{
			Exp RESULT = null;
			int xleft = ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 2)).left;
			int xright = ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 2)).right;
			Exp x = (Exp) ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 2)).value;
			int yleft = ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 0)).left;
			int yright = ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 0)).right;
			Exp y = (Exp) ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 0)).value;

			RESULT = new UnresolvedFunCall("XOR", Syntax.Infix, new Exp[] { x,
					y });

			CUP$Parser$result = new java_cup.runtime.Symbol(
					13/* value_expression */,
					((java_cup.runtime.Symbol) CUP$Parser$stack
							.elementAt(CUP$Parser$top - 2)).left,
					((java_cup.runtime.Symbol) CUP$Parser$stack
							.elementAt(CUP$Parser$top - 0)).right, RESULT);
		}
			return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 13: // value_expression ::= value_expression OR term5
		{
			Exp RESULT = null;
			int xleft = ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 2)).left;
			int xright = ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 2)).right;
			Exp x = (Exp) ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 2)).value;
			int yleft = ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 0)).left;
			int yright = ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 0)).right;
			Exp y = (Exp) ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 0)).value;

			RESULT = new UnresolvedFunCall("OR", Syntax.Infix,
					new Exp[] { x, y });

			CUP$Parser$result = new java_cup.runtime.Symbol(
					13/* value_expression */,
					((java_cup.runtime.Symbol) CUP$Parser$stack
							.elementAt(CUP$Parser$top - 2)).left,
					((java_cup.runtime.Symbol) CUP$Parser$stack
							.elementAt(CUP$Parser$top - 0)).right, RESULT);
		}
			return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 12: // value_expression ::= term5
		{
			Exp RESULT = null;

			// Default action for single-symbol production
			RESULT = (Exp) ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top)).value;
			CUP$Parser$result = new java_cup.runtime.Symbol(
					13/* value_expression */,
					((java_cup.runtime.Symbol) CUP$Parser$stack
							.elementAt(CUP$Parser$top - 0)).left,
					((java_cup.runtime.Symbol) CUP$Parser$stack
							.elementAt(CUP$Parser$top - 0)).right, RESULT);
		}
			return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 11: // cube_name ::= compound_id
		{
			Id RESULT = null;

			// Default action for single-symbol production
			RESULT = (Id) ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top)).value;
			CUP$Parser$result = new java_cup.runtime.Symbol(20/* cube_name */,
					((java_cup.runtime.Symbol) CUP$Parser$stack
							.elementAt(CUP$Parser$top - 0)).left,
					((java_cup.runtime.Symbol) CUP$Parser$stack
							.elementAt(CUP$Parser$top - 0)).right, RESULT);
		}
			return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 10: // compound_id ::= compound_id DOT identifier
		{
			Id RESULT = null;
			int hdleft = ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 2)).left;
			int hdright = ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 2)).right;
			Id hd = (Id) ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 2)).value;
			int tlleft = ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 0)).left;
			int tlright = ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 0)).right;
			Id.Segment tl = (Id.Segment) ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 0)).value;

			RESULT = hd.append(tl);

			CUP$Parser$result = new java_cup.runtime.Symbol(19/* compound_id */,
					((java_cup.runtime.Symbol) CUP$Parser$stack
							.elementAt(CUP$Parser$top - 2)).left,
					((java_cup.runtime.Symbol) CUP$Parser$stack
							.elementAt(CUP$Parser$top - 0)).right, RESULT);
		}
			return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 9: // compound_id ::= identifier
		{
			Id RESULT = null;
			int ileft = ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 0)).left;
			int iright = ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 0)).right;
			Id.Segment i = (Id.Segment) ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 0)).value;

			RESULT = new Id(i);

			CUP$Parser$result = new java_cup.runtime.Symbol(19/* compound_id */,
					((java_cup.runtime.Symbol) CUP$Parser$stack
							.elementAt(CUP$Parser$top - 0)).left,
					((java_cup.runtime.Symbol) CUP$Parser$stack
							.elementAt(CUP$Parser$top - 0)).right, RESULT);
		}
			return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 8: // keyword ::= PROPERTIES
		{
			String RESULT = null;

			RESULT = "Properties";

			CUP$Parser$result = new java_cup.runtime.Symbol(26/* keyword */,
					((java_cup.runtime.Symbol) CUP$Parser$stack
							.elementAt(CUP$Parser$top - 0)).left,
					((java_cup.runtime.Symbol) CUP$Parser$stack
							.elementAt(CUP$Parser$top - 0)).right, RESULT);
		}
			return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 7: // keyword ::= DIMENSION
		{
			String RESULT = null;

			RESULT = "Dimension";

			CUP$Parser$result = new java_cup.runtime.Symbol(26/* keyword */,
					((java_cup.runtime.Symbol) CUP$Parser$stack
							.elementAt(CUP$Parser$top - 0)).left,
					((java_cup.runtime.Symbol) CUP$Parser$stack
							.elementAt(CUP$Parser$top - 0)).right, RESULT);
		}
			return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 6: // identifier ::= quoted_identifier
		{
			Id.Segment RESULT = null;

			// Default action for single-symbol production
			RESULT = (Id.Segment) ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top)).value;
			CUP$Parser$result = new java_cup.runtime.Symbol(27/* identifier */,
					((java_cup.runtime.Symbol) CUP$Parser$stack
							.elementAt(CUP$Parser$top - 0)).left,
					((java_cup.runtime.Symbol) CUP$Parser$stack
							.elementAt(CUP$Parser$top - 0)).right, RESULT);
		}
			return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 5: // identifier ::= unquoted_identifier
		{
			Id.Segment RESULT = null;

			// Default action for single-symbol production
			RESULT = (Id.Segment) ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top)).value;
			CUP$Parser$result = new java_cup.runtime.Symbol(27/* identifier */,
					((java_cup.runtime.Symbol) CUP$Parser$stack
							.elementAt(CUP$Parser$top - 0)).left,
					((java_cup.runtime.Symbol) CUP$Parser$stack
							.elementAt(CUP$Parser$top - 0)).right, RESULT);
		}
			return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 4: // unquoted_identifier ::= keyword
		{
			Id.Segment RESULT = null;
			int ileft = ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 0)).left;
			int iright = ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 0)).right;
			String i = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 0)).value;

			RESULT = new Id.Segment(i, Id.Quoting.UNQUOTED);

			CUP$Parser$result = new java_cup.runtime.Symbol(
					29/* unquoted_identifier */,
					((java_cup.runtime.Symbol) CUP$Parser$stack
							.elementAt(CUP$Parser$top - 0)).left,
					((java_cup.runtime.Symbol) CUP$Parser$stack
							.elementAt(CUP$Parser$top - 0)).right, RESULT);
		}
			return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 3: // unquoted_identifier ::= ID
		{
			Id.Segment RESULT = null;
			int ileft = ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 0)).left;
			int iright = ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 0)).right;
			String i = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 0)).value;

			RESULT = new Id.Segment(i, Id.Quoting.UNQUOTED);

			CUP$Parser$result = new java_cup.runtime.Symbol(
					29/* unquoted_identifier */,
					((java_cup.runtime.Symbol) CUP$Parser$stack
							.elementAt(CUP$Parser$top - 0)).left,
					((java_cup.runtime.Symbol) CUP$Parser$stack
							.elementAt(CUP$Parser$top - 0)).right, RESULT);
		}
			return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 2: // amp_quoted_identifier ::= AMP_QUOTED_ID
		{
			Id.Segment RESULT = null;
			int ileft = ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 0)).left;
			int iright = ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 0)).right;
			String i = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 0)).value;

			RESULT = new Id.Segment(i, Id.Quoting.KEY);

			CUP$Parser$result = new java_cup.runtime.Symbol(
					30/* amp_quoted_identifier */,
					((java_cup.runtime.Symbol) CUP$Parser$stack
							.elementAt(CUP$Parser$top - 0)).left,
					((java_cup.runtime.Symbol) CUP$Parser$stack
							.elementAt(CUP$Parser$top - 0)).right, RESULT);
		}
			return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 1: // quoted_identifier ::= QUOTED_ID
		{
			Id.Segment RESULT = null;
			int ileft = ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 0)).left;
			int iright = ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 0)).right;
			String i = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 0)).value;

			RESULT = new Id.Segment(i, Id.Quoting.QUOTED);

			CUP$Parser$result = new java_cup.runtime.Symbol(
					28/* quoted_identifier */,
					((java_cup.runtime.Symbol) CUP$Parser$stack
							.elementAt(CUP$Parser$top - 0)).left,
					((java_cup.runtime.Symbol) CUP$Parser$stack
							.elementAt(CUP$Parser$top - 0)).right, RESULT);
		}
			return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 0: // $START ::= statement EOF
		{
			Object RESULT = null;
			int start_valleft = ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 1)).left;
			int start_valright = ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 1)).right;
			QueryPart start_val = (QueryPart) ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 1)).value;
			RESULT = start_val;
			CUP$Parser$result = new java_cup.runtime.Symbol(0/* $START */,
					((java_cup.runtime.Symbol) CUP$Parser$stack
							.elementAt(CUP$Parser$top - 1)).left,
					((java_cup.runtime.Symbol) CUP$Parser$stack
							.elementAt(CUP$Parser$top - 0)).right, RESULT);
		}
			/* ACCEPT */
			CUP$Parser$parser.done_parsing();
			return CUP$Parser$result;

			/* . . . . . . */
		default:
			throw new Exception(
					"Invalid action number found in internal parse table");

		}
	}
}
